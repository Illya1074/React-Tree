{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/illia/addnote/front/src/Containers/Tree/Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\n\nconst Tree = () => {\n  _s();\n\n  const [state, setState] = useState();\n  const [tree, setTree] = useState([{\n    id: '1',\n    title: 'item1',\n    icon: 'folder',\n    state: 'open',\n    items: [{\n      id: '2',\n      title: 'item1.1',\n      icon: 'file',\n      state: 'open',\n      items: [{\n        id: '2',\n        title: 'item1.1.1',\n        icon: 'file',\n        state: 'open',\n        items: []\n      }, {\n        id: '2',\n        title: 'item1.1.2',\n        icon: 'file',\n        state: 'open',\n        items: []\n      }]\n    }]\n  }, {\n    id: '3',\n    title: 'item3',\n    icon: 'folder',\n    state: 'open',\n    items: [{\n      id: '2',\n      title: 'item3.1',\n      icon: 'file',\n      state: 'open',\n      items: []\n    }]\n  }]);\n\n  const addItemToState = item => {\n    setState(1);\n  };\n\n  const render = tree => {\n    tree.map(item => {\n      console.log(item.title); // addItemToState(item)\n      // setState([...state, item.title])\n\n      if (item.items !== []) {\n        render(item.items);\n      }\n    }); // return state;  \n    // console.log(tree)\n  };\n\n  console.log(render(tree));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addItemToState(123),\n      children: \"call\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Tree, \"L5sS9/0/qlJDYhQfXjI6hxWYBcg=\");\n\n_c = Tree;\nexport default Tree;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"sources":["/home/illia/addnote/front/src/Containers/Tree/Tree.js"],"names":["React","useState","Tree","state","setState","tree","setTree","id","title","icon","items","addItemToState","item","render","map","console","log"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACf,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,EAAlC;AACA,QAAM,CAACI,IAAD,EAAMC,OAAN,IAAiBL,QAAQ,CAAC,CAC9B;AACIM,IAAAA,EAAE,EAAE,GADR;AAEIC,IAAAA,KAAK,EAAE,OAFX;AAGIC,IAAAA,IAAI,EAAE,QAHV;AAIIN,IAAAA,KAAK,EAAE,MAJX;AAKIO,IAAAA,KAAK,EAAE,CACH;AACIH,MAAAA,EAAE,EAAE,GADR;AAEIC,MAAAA,KAAK,EAAE,SAFX;AAGIC,MAAAA,IAAI,EAAE,MAHV;AAIIN,MAAAA,KAAK,EAAE,MAJX;AAKIO,MAAAA,KAAK,EAAE,CACH;AACIH,QAAAA,EAAE,EAAE,GADR;AAEIC,QAAAA,KAAK,EAAE,WAFX;AAGIC,QAAAA,IAAI,EAAE,MAHV;AAIIN,QAAAA,KAAK,EAAE,MAJX;AAKIO,QAAAA,KAAK,EAAE;AALX,OADG,EAQH;AACIH,QAAAA,EAAE,EAAE,GADR;AAEIC,QAAAA,KAAK,EAAE,WAFX;AAGIC,QAAAA,IAAI,EAAE,MAHV;AAIIN,QAAAA,KAAK,EAAE,MAJX;AAKIO,QAAAA,KAAK,EAAE;AALX,OARG;AALX,KADG;AALX,GAD8B,EA+B9B;AACIH,IAAAA,EAAE,EAAE,GADR;AAEIC,IAAAA,KAAK,EAAE,OAFX;AAGIC,IAAAA,IAAI,EAAE,QAHV;AAIIN,IAAAA,KAAK,EAAE,MAJX;AAKIO,IAAAA,KAAK,EAAE,CACH;AACIH,MAAAA,EAAE,EAAE,GADR;AAEIC,MAAAA,KAAK,EAAE,SAFX;AAGIC,MAAAA,IAAI,EAAE,MAHV;AAIIN,MAAAA,KAAK,EAAE,MAJX;AAKIO,MAAAA,KAAK,EAAE;AALX,KADG;AALX,GA/B8B,CAAD,CAA/B;;AAgDA,QAAMC,cAAc,GAAIC,IAAD,IAAU;AAC/BR,IAAAA,QAAQ,CAAC,CAAD,CAAR;AACD,GAFD;;AAIA,QAAMS,MAAM,GAAIR,IAAD,IAAU;AACvBA,IAAAA,IAAI,CAACS,GAAL,CAAUF,IAAD,IAAU;AACfG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACJ,KAAjB,EADe,CAEf;AACA;;AACA,UAAGI,IAAI,CAACF,KAAL,KAAe,EAAlB,EAAqB;AACjBG,QAAAA,MAAM,CAACD,IAAI,CAACF,KAAN,CAAN;AACH;AAEJ,KARD,EADuB,CAUvB;AACA;AACD,GAZD;;AAcAK,EAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACR,IAAD,CAAlB;AAEF,sBACE;AAAA,2BACI;AAAQ,MAAA,OAAO,EAAE,MAAMM,cAAc,CAAC,GAAD,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA3ED;;GAAMT,I;;KAAAA,I;AA6EN,eAAeA,IAAf","sourcesContent":["import React, {useState} from 'react'\n\nconst Tree = () => {\n    const [state, setState] = useState(); \n    const [tree,setTree] = useState([\n      {\n          id: '1',\n          title: 'item1', \n          icon: 'folder',\n          state: 'open',\n          items: [\n              {\n                  id: '2',\n                  title: 'item1.1',\n                  icon: 'file',\n                  state: 'open',\n                  items: [\n                      {\n                          id: '2',\n                          title: 'item1.1.1',\n                          icon: 'file',\n                          state: 'open',\n                          items: []\n                      },\n                      {\n                          id: '2',\n                          title: 'item1.1.2',\n                          icon: 'file',\n                          state: 'open',\n                          items: []\n                      }\n                  ]\n              }\n          ]\n      },\n      {\n          id: '3',\n          title: 'item3', \n          icon: 'folder',\n          state: 'open',\n          items: [\n              {\n                  id: '2',\n                  title: 'item3.1',\n                  icon: 'file',\n                  state: 'open',\n                  items: []\n              }\n          ]\n      }\n    ])\n    \n    const addItemToState = (item) => {\n      setState(1)\n    }\n\n    const render = (tree) => {\n      tree.map((item) => {\n          console.log(item.title);\n          // addItemToState(item)\n          // setState([...state, item.title])\n          if(item.items !== []){\n              render(item.items);\n          }\n          \n      } )\n      // return state;  \n      // console.log(tree)\n    }\n  \n    console.log(render(tree))\n\n  return (\n    <div>\n        <button onClick={() => addItemToState(123)}>call</button>\n    </div>\n  )\n}\n\nexport default Tree\n"]},"metadata":{},"sourceType":"module"}