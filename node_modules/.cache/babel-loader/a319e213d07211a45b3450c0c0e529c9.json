{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/illia/addnote/front/src/Layout.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Tree from './Pages/Tree/Tree';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport allActions from './Actions';\n\nconst Layout = () => {\n  _s();\n\n  const tree = useSelector(state => state.tree);\n  const dispatch = useDispatch();\n  const [lastNode, setLastNode] = useState(null);\n  const [isDraggingVal, setIsDraggingVal] = useState(false);\n  const [sign, setSign] = useState(false);\n  const [from, setFrom] = useState();\n  useEffect(() => {\n    // console.log(from,lastNode)\n    dispatchFun(from, lastNode);\n    setSign(false); // myDispatch()\n  }, [sign]);\n\n  function fireEvent(...args) {\n    const event = args[0];\n    const params = args.splice(1);\n    dispatch(allActions.tree[event].apply(this, params));\n  }\n\n  const myLastNode = val => {\n    setLastNode(val); // console.log(val) \n  };\n\n  const dispatchFun = (a, b) => {\n    if (lastNode !== null) {\n      console.log('dispatch from ' + a + ' to ' + b);\n      setLastNode(null);\n    }\n  };\n\n  const myDispatch = val => {\n    setFrom(val);\n    setSign(true); // console.log(lastNode)\n  };\n\n  const isDraggingFun = val => {\n    setIsDraggingVal(val);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tree\",\n      children: /*#__PURE__*/_jsxDEV(Tree, {\n        eventDispatcher: fireEvent,\n        myDispatch: myDispatch,\n        myLastNode: myLastNode,\n        items: tree,\n        isDragging: isDraggingFun,\n        myNodes: lastNode,\n        isDraggingVal: isDraggingVal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(Layout, \"A45ugR3vB0SYvQlF36Xp0SAc3oY=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Layout;\nexport default Layout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Layout\");","map":{"version":3,"sources":["/home/illia/addnote/front/src/Layout.js"],"names":["React","useState","useEffect","Tree","useSelector","useDispatch","allActions","Layout","tree","state","dispatch","lastNode","setLastNode","isDraggingVal","setIsDraggingVal","sign","setSign","from","setFrom","dispatchFun","fireEvent","args","event","params","splice","apply","myLastNode","val","a","b","console","log","myDispatch","isDraggingFun"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,OAAOC,UAAP,MAAuB,WAAvB;;AAGA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACjB,QAAMC,IAAI,GAAGJ,WAAW,CAACK,KAAK,IAAIA,KAAK,CAACD,IAAhB,CAAxB;AACA,QAAME,QAAQ,GAAGL,WAAW,EAA5B;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACY,aAAD,EAAgBC,gBAAhB,IAAoCb,QAAQ,CAAC,KAAD,CAAlD;AAEA,QAAM,CAACc,IAAD,EAAOC,OAAP,IAAkBf,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM,CAACgB,IAAD,EAAOC,OAAP,IAAkBjB,QAAQ,EAAhC;AAGAC,EAAAA,SAAS,CAAC,MAAM;AACZ;AACAiB,IAAAA,WAAW,CAACF,IAAD,EAAMN,QAAN,CAAX;AACAK,IAAAA,OAAO,CAAC,KAAD,CAAP,CAHY,CAIZ;AACH,GALQ,EAKN,CAACD,IAAD,CALM,CAAT;;AAOA,WAASK,SAAT,CAAmB,GAAGC,IAAtB,EAA4B;AACxB,UAAMC,KAAK,GAAGD,IAAI,CAAC,CAAD,CAAlB;AACA,UAAME,MAAM,GAAGF,IAAI,CAACG,MAAL,CAAY,CAAZ,CAAf;AAEAd,IAAAA,QAAQ,CAACJ,UAAU,CAACE,IAAX,CAAgBc,KAAhB,EAAuBG,KAAvB,CAA6B,IAA7B,EAAmCF,MAAnC,CAAD,CAAR;AACH;;AAGD,QAAMG,UAAU,GAAIC,GAAD,IAAS;AACxBf,IAAAA,WAAW,CAACe,GAAD,CAAX,CADwB,CAExB;AACH,GAHD;;AAKA,QAAMR,WAAW,GAAG,CAACS,CAAD,EAAIC,CAAJ,KAAU;AAC1B,QAAGlB,QAAQ,KAAK,IAAhB,EAAqB;AACjBmB,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAiBH,CAAjB,GAAmB,MAAnB,GAA0BC,CAAtC;AACAjB,MAAAA,WAAW,CAAC,IAAD,CAAX;AACH;AAEJ,GAND;;AAQA,QAAMoB,UAAU,GAAIL,GAAD,IAAS;AACxBT,IAAAA,OAAO,CAACS,GAAD,CAAP;AACAX,IAAAA,OAAO,CAAC,IAAD,CAAP,CAFwB,CAGxB;AACH,GAJD;;AAMA,QAAMiB,aAAa,GAAIN,GAAD,IAAS;AAC3Bb,IAAAA,gBAAgB,CAACa,GAAD,CAAhB;AACH,GAFD;;AAMA,sBAEI;AAAA,2BAEI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,6BACI,QAAC,IAAD;AAAM,QAAA,eAAe,EAAEP,SAAvB;AAAkC,QAAA,UAAU,EAAEY,UAA9C;AAA0D,QAAA,UAAU,EAAEN,UAAtE;AACC,QAAA,KAAK,EAAElB,IADR;AACc,QAAA,UAAU,EAAEyB,aAD1B;AACyC,QAAA,OAAO,EAAEtB,QADlD;AAC4D,QAAA,aAAa,EAAEE;AAD3E;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAFJ,mBAFJ;AAUH,CA5DD;;GAAMN,M;UACWH,W,EACIC,W;;;KAFfE,M;AA8DN,eAAeA,MAAf","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Tree from './Pages/Tree/Tree'\nimport {useSelector, useDispatch} from \"react-redux\"\nimport allActions from './Actions' \n\n\nconst Layout = () => {\n    const tree = useSelector(state => state.tree)\n    const dispatch = useDispatch();\n    const [lastNode, setLastNode] = useState(null)\n    const [isDraggingVal, setIsDraggingVal] = useState(false);\n    \n    const [sign, setSign] = useState(false);\n    const [from, setFrom] = useState();\n\n\n    useEffect(() => {\n        // console.log(from,lastNode)\n        dispatchFun(from,lastNode)\n        setSign(false)\n        // myDispatch()\n    }, [sign])\n\n    function fireEvent(...args) {\n        const event = args[0];\n        const params = args.splice(1);\n\n        dispatch(allActions.tree[event].apply(this, params))\n    }\n\n\n    const myLastNode = (val) => {\n        setLastNode(val)\n        // console.log(val) \n    }\n\n    const dispatchFun = (a, b) => {\n        if(lastNode !== null){\n            console.log('dispatch from '+a+' to '+b)\n            setLastNode(null)\n        }\n        \n    }\n\n    const myDispatch = (val) => {\n        setFrom(val)\n        setSign(true)\n        // console.log(lastNode)\n    }\n\n    const isDraggingFun = (val) => {\n        setIsDraggingVal(val)\n    }\n\n    \n\n    return (\n        \n        <>\n            {/* <ContentEditable html={'Okey'} onBlur={handleBlur} onChange={(evt)=>} /> */}\n            <div className='tree'>\n                <Tree eventDispatcher={fireEvent} myDispatch={myDispatch} myLastNode={myLastNode}\n                 items={tree} isDragging={isDraggingFun} myNodes={lastNode} isDraggingVal={isDraggingVal}/>\n            </div>\n        </>\n    )\n}\n\nexport default Layout\n"]},"metadata":{},"sourceType":"module"}