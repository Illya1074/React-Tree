{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/illia/addnote/front/src/Containers/Tree/Tree.js\";\nimport React from 'react'; // import {useState} from 'react'\n// const render = (tree, state=[], space=' ') => {\n//     let arr = state;\n//     tree.map((item) => {\n//         // arr = [...arr, item.title] \n//         console.log(space+item.title);\n//         if(item.items !== []){\n//             render(item.items, arr, space + ' ');\n//         }          \n//     } )\n// }\n\nconst TreeItem = ({\n  item\n}) => /*#__PURE__*/_jsxDEV(\"li\", {\n  children: [item.title, item.items ? /*#__PURE__*/_jsxDEV(Tree, {\n    items: item.items\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 31\n  }, this) : null]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 18,\n  columnNumber: 30\n}, this);\n\n_c = TreeItem;\n\nconst Tree = ({\n  items\n}) => {\n  // const [state, setState] = useState([]);     \n  // const render = (tree, state=[], space=0) => {\n  //     // console.log(tree[0].title);\n  //     let arr = state;\n  //     // console.log(space)\n  //     for (let i = 0, length = tree.length; i < length; i++) {\n  //         // console.log(tree[i].title, space);\n  //         arr.push({\n  //             title: tree[i].title,\n  //             space: space\n  //         })\n  //         if(tree[i].items !== []){\n  //             render(tree[i].items, arr, space+1);\n  //         }\n  //         // space--;    \n  //     }\n  //   return state;  \n  // }\n  // console.log(render(tree))\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: items.map(i => /*#__PURE__*/_jsxDEV(TreeItem, {\n      item: i\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 25\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = Tree;\nexport default Tree;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TreeItem\");\n$RefreshReg$(_c2, \"Tree\");","map":{"version":3,"sources":["/home/illia/addnote/front/src/Containers/Tree/Tree.js"],"names":["React","TreeItem","item","title","items","Tree","map","i"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,kBAAY;AAAA,aACxBA,IAAI,CAACC,KADmB,EACZD,IAAI,CAACE,KAAL,gBAAa,QAAC,IAAD;AAAM,IAAA,KAAK,EAAEF,IAAI,CAACE;AAAlB;AAAA;AAAA;AAAA;AAAA,UAAb,GAA0C,IAD9B;AAAA;AAAA;AAAA;AAAA;AAAA,QAA7B;;KAAMH,Q;;AAKN,MAAMI,IAAI,GAAG,CAAC;AAACD,EAAAA;AAAD,CAAD,KAAa;AACtB;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAIF,sBACE;AAAA,cACKA,KAAK,CAACE,GAAN,CAAUC,CAAC,iBAAI,QAAC,QAAD;AAAU,MAAA,IAAI,EAAEA;AAAhB;AAAA;AAAA;AAAA;AAAA,YAAf;AADL;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAlCD;;MAAMF,I;AAoCN,eAAeA,IAAf","sourcesContent":["import React from 'react';\n// import {useState} from 'react'\n\n  \n\n// const render = (tree, state=[], space=' ') => {\n//     let arr = state;\n//     tree.map((item) => {\n//         // arr = [...arr, item.title] \n//         console.log(space+item.title);\n        \n//         if(item.items !== []){\n//             render(item.items, arr, space + ' ');\n//         }          \n//     } )\n// }\n\nconst TreeItem = ({item}) => <li>\n    {item.title}{item.items ? <Tree items={item.items}/> : null}\n</li>\n\n\nconst Tree = ({items}) => {\n    // const [state, setState] = useState([]);     \n\n    // const render = (tree, state=[], space=0) => {\n      \n    //     // console.log(tree[0].title);\n    //     let arr = state;\n    //     // console.log(space)\n    //     for (let i = 0, length = tree.length; i < length; i++) {\n    //         // console.log(tree[i].title, space);\n    //         arr.push({\n    //             title: tree[i].title,\n    //             space: space\n    //         })\n    //         if(tree[i].items !== []){\n    //             render(tree[i].items, arr, space+1);\n    //         }\n    //         // space--;    \n    //     }\n        \n    //   return state;  \n      \n    // }\n\n    // console.log(render(tree))\n    \n    \n\n  return (\n    <ul>\n        {items.map(i => <TreeItem item={i}/>)}\n        {/* {render(tree).map((item,i) => <h1 style = {{paddingLeft:item.space*30+'px'}} key={i}>{item.title}</h1>)} */}\n    </ul>\n  )\n}\n\nexport default Tree\n"]},"metadata":{},"sourceType":"module"}