{"ast":null,"code":"const R = require('ramda'); /////////////////////////////////// that function return a path wraped in array to primitive of object which was passed\n\n\nconst findPath = (primitive, object, path = []) => {\n  for (const [key, value] of Object.entries(object)) {\n    if (value === primitive) {\n      return [...path, key];\n    }\n\n    if (typeof value === 'object' || typeof value === 'function') {\n      const newPath = findPath(primitive, value, [...path, key]);\n\n      if (newPath) {\n        return newPath;\n      }\n    }\n  }\n\n  return null;\n}; ////////////////////////////////// that function take path wrapped in array an compose it\n\n\nconst composeLense = arr => {\n  return R.compose(...arr.map(item => isNaN(item) ? R.lensProp(item) : R.lensIndex(parseInt(item))));\n}; //////////////////////////////////// that function return updated state of tree\n\n\nconst openAndClose = (prim, obj) => {\n  const updatedPath = [...findPath(prim, obj).slice(0, findPath(prim, obj).length - 1), 'state'];\n  const boolState = !R.view(composeLense(updatedPath), obj);\n  const newState = R.set(composeLense(updatedPath), boolState, obj);\n  return newState;\n}; //////////////////////////////////// that function return update tree with additional node \n\n\nconst addNode = (id, state) => {\n  const updatedPath = [...findPath(id, state).slice(0, findPath(id, state).length - 1), 'items'];\n  const myItem = R.view(composeLense(updatedPath), state);\n  const newState = R.set(composeLense(updatedPath), [...myItem, {\n    id: Math.floor(Math.random() * 16777215).toString(16),\n    title: 'new item',\n    icon: 'file',\n    state: true,\n    items: []\n  }], state);\n  return newState;\n}; ///////////////////////////////////// deleteNode delete node from your tree\n\n\nconst deleteNode = (id, state) => {\n  if (findPath(id, state).length - 1 === 1) {\n    return [...state.slice(0, findPath(id, state)[0]), ...state.slice(findPath(id, state)[0] + 1)];\n  }\n\n  const updatedPath = [...findPath(id, state).slice(0, findPath(id, state).length - 1)];\n  const indexDelItem = findPath(id, state).slice(0, findPath(id, state).length - 1)[updatedPath.length - 1];\n  const myItem = R.view(composeLense(updatedPath.slice(0, updatedPath.length - 1)), state);\n  const newState = R.set(composeLense(updatedPath.slice(0, updatedPath.length - 1)), [...myItem.slice(0, indexDelItem), ...myItem.slice(indexDelItem + 1)], state);\n  return newState;\n};\n\nconst editTitle = (id, title, state) => {\n  const updatedPath = [...findPath(id, state).slice(0, findPath(id, state).length - 1), 'title'];\n  const newState = R.set(composeLense(updatedPath), title, state);\n  return newState; // console.log(id, title)\n};\n\nconst tree = (state = [{\n  id: Math.floor(Math.random() * 16777215).toString(16),\n  title: 'life',\n  icon: 'folder',\n  state: true,\n  items: [{\n    id: Math.floor(Math.random() * 16777215).toString(16),\n    title: 'books',\n    icon: 'file',\n    state: true,\n    items: [{\n      id: Math.floor(Math.random() * 16777215).toString(16),\n      title: 'science',\n      icon: 'file',\n      state: true,\n      items: []\n    }, {\n      id: Math.floor(Math.random() * 16777215).toString(16),\n      title: 'poem',\n      icon: 'file',\n      state: true,\n      items: []\n    }]\n  }, {\n    id: Math.floor(Math.random() * 16777215).toString(16),\n    title: 'school',\n    icon: 'file',\n    state: true,\n    items: [{\n      id: Math.floor(Math.random() * 16777215).toString(16),\n      title: 'math',\n      icon: 'file',\n      state: true,\n      items: []\n    }, {\n      id: Math.floor(Math.random() * 16777215).toString(16),\n      title: 'physic',\n      icon: 'file',\n      state: true,\n      items: []\n    }]\n  }]\n}, {\n  id: Math.floor(Math.random() * 16777215).toString(16),\n  title: 'shop',\n  icon: 'folder',\n  state: true,\n  items: [{\n    id: Math.floor(Math.random() * 16777215).toString(16),\n    title: 'bread',\n    icon: 'file',\n    state: true,\n    items: []\n  }]\n}, {\n  id: Math.floor(Math.random() * 16777215).toString(16),\n  title: 'myday',\n  icon: 'folder',\n  state: true,\n  items: [{\n    id: Math.floor(Math.random() * 16777215).toString(16),\n    title: 'homework',\n    icon: 'file',\n    state: true,\n    items: []\n  }]\n}, {\n  id: Math.floor(Math.random() * 16777215).toString(16),\n  title: 'job',\n  icon: 'folder',\n  state: true,\n  items: [{\n    id: Math.floor(Math.random() * 16777215).toString(16),\n    title: 'computer',\n    icon: 'file',\n    state: true,\n    items: []\n  }]\n}], action) => {\n  switch (action.type) {\n    case 'OPEN':\n      return openAndClose(action.id, state);\n\n    case 'ADD_NODE':\n      return addNode(action.id, state);\n\n    case 'DELETE_NODE':\n      return deleteNode(action.id, state);\n\n    case 'EDIT_TITLE':\n      return editTitle(action.id, action.val, state);\n  }\n\n  return state;\n};\n\nexport default tree;","map":{"version":3,"sources":["/home/illia/addnote/front/src/Reducers/tree.js"],"names":["R","require","findPath","primitive","object","path","key","value","Object","entries","newPath","composeLense","arr","compose","map","item","isNaN","lensProp","lensIndex","parseInt","openAndClose","prim","obj","updatedPath","slice","length","boolState","view","newState","set","addNode","id","state","myItem","Math","floor","random","toString","title","icon","items","deleteNode","indexDelItem","editTitle","tree","action","type","val"],"mappings":"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","sourcesContent":["\nconst R = require('ramda')\n\n\n/////////////////////////////////// that function return a path wraped in array to primitive of object which was passed\n\nconst findPath = (primitive, object, path = []) => {\n    for (const [key, value] of Object.entries(object)) {\n      if (value === primitive) {\n        return [...path, key];\n      }\n      \n      if (typeof value === 'object' || typeof value === 'function') {\n        const newPath = findPath(primitive, value, [...path, key]);\n        if (newPath) {\n          return newPath;\n        }\n      }\n    }\n    return null;\n  }\n\n  ////////////////////////////////// that function take path wrapped in array an compose it\n\nconst composeLense = (arr) => {\n    return R.compose(...arr.map(item => isNaN(item) ? R.lensProp(item) : R.lensIndex(parseInt(item))));\n}\n\n//////////////////////////////////// that function return updated state of tree\n\nconst openAndClose = (prim, obj) => {\n    \n    const updatedPath = [...findPath(prim,obj).slice(0, findPath(prim,obj).length-1), 'state']\n    const boolState = !R.view(composeLense(updatedPath), obj);\n    const newState = R.set(composeLense(updatedPath), boolState, obj);\n\n    return newState;\n}\n\n//////////////////////////////////// that function return update tree with additional node \n\nconst addNode = (id, state) => {\n    const updatedPath = [...findPath(id,state).slice(0, findPath(id,state).length-1), 'items'];\n    const myItem = R.view(composeLense(updatedPath), state);\n    const newState = R.set(composeLense(updatedPath), [...myItem,{\n        id: Math.floor(Math.random()*16777215).toString(16),\n        title: 'new item',\n        icon: 'file',\n        state: true,\n        items: []\n    }], state);\n    return newState;\n}\n\n///////////////////////////////////// deleteNode delete node from your tree\n\n\nconst deleteNode = (id , state) => {\n\n    if(findPath(id,state).length-1 === 1){\n        return [...state.slice(0,findPath(id,state)[0]), ...state.slice(findPath(id,state)[0]+1)]\n    }\n    const updatedPath = [...findPath(id,state).slice(0, findPath(id,state).length-1)];\n    const indexDelItem = findPath(id,state).slice(0, findPath(id,state).length-1)[updatedPath.length-1];\n    const myItem = R.view(composeLense(updatedPath.slice(0,updatedPath.length-1)), state);\n    const newState = R.set(composeLense(updatedPath.slice(0,updatedPath.length-1)), [...myItem.slice(0,indexDelItem), ...myItem.slice(indexDelItem+1)], state);\n    return newState\n}\n\n\n\n\nconst editTitle = (id, title, state) => {\n\n    const updatedPath = [...findPath(id,state).slice(0, findPath(id,state).length-1), 'title']\n    const newState = R.set(composeLense(updatedPath), title, state);\n    return newState;\n    // console.log(id, title)\n}\n\nconst tree = (state =  [\n    {\n        id: Math.floor(Math.random()*16777215).toString(16),\n        title: 'life', \n        icon: 'folder',\n        state: true,\n        items: [\n            {\n                id: Math.floor(Math.random()*16777215).toString(16),\n                title: 'books',\n                icon: 'file',\n                state: true,\n                items: [\n                    {\n                        id: Math.floor(Math.random()*16777215).toString(16),\n                        title: 'science',\n                        icon: 'file',\n                        state: true,\n                        items: []\n                    },\n                    \n                    {\n                        id: Math.floor(Math.random()*16777215).toString(16),\n                        title: 'poem',\n                        icon: 'file',\n                        state: true,\n                        items: []\n                    }\n                ]\n            },\n            {\n              id: Math.floor(Math.random()*16777215).toString(16),\n              title: 'school',\n              icon: 'file',\n              state: true,\n              items: [\n                  {\n                      id: Math.floor(Math.random()*16777215).toString(16),\n                      title: 'math',\n                      icon: 'file',\n                      state: true,\n                      items: []\n                  },\n                  {\n                      id: Math.floor(Math.random()*16777215).toString(16),\n                      title: 'physic',\n                      icon: 'file',\n                      state: true,\n                      items: []\n                  }\n              ]\n          }\n        ]\n    },\n    {\n        id: Math.floor(Math.random()*16777215).toString(16),\n        title: 'shop', \n        icon: 'folder',\n        state: true,\n        items: [\n            {\n                id: Math.floor(Math.random()*16777215).toString(16),\n                title: 'bread',\n                icon: 'file',\n                state: true,\n                items: []\n            }\n        ]\n    },\n    {\n        id: Math.floor(Math.random()*16777215).toString(16),\n        title: 'myday', \n        icon: 'folder',\n        state: true,\n        items: [\n            {\n                id: Math.floor(Math.random()*16777215).toString(16),\n                title: 'homework',\n                icon: 'file',\n                state: true,\n                items: []\n            }\n        ]\n    },\n    {\n        id: Math.floor(Math.random()*16777215).toString(16),\n        title: 'job', \n        icon: 'folder',\n        state: true,\n        items: [\n            {\n                id: Math.floor(Math.random()*16777215).toString(16),\n                title: 'computer',\n                icon: 'file',\n                state: true,\n                items: []\n            }\n        ]\n    }\n], action) => {\n    switch(action.type){\n        case 'OPEN':\n            return openAndClose(action.id, state);\n        case 'ADD_NODE':\n            return addNode(action.id, state);\n        case 'DELETE_NODE':\n            return deleteNode(action.id, state)\n        case 'EDIT_TITLE':\n            return editTitle(action.id, action.val, state)\n    }\n    return state;   \n}\n\nexport default tree;"]},"metadata":{},"sourceType":"module"}