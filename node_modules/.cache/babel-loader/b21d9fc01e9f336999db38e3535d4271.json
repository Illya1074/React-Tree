{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/illia/addnote/front/src/Containers/Tree/Tree.js\";\nimport React, { useState } from 'react';\n\nconst render = (tree, state = [], space = ' ') => {\n  let arr = state;\n  tree.map(item => {\n    // arr = [...arr, item.title] \n    console.log(space + item.title);\n\n    if (item.items !== []) {\n      render(item.items, arr, space + ' ');\n    }\n  });\n};\n\nconst TreeItem = ({\n  items\n}) => {};\n\n_c = TreeItem;\n\nconst Tree = () => {\n  // const [state, setState] = useState([]);     \n  // const render = (tree, state=[], space=0) => {\n  //     // console.log(tree[0].title);\n  //     let arr = state;\n  //     // console.log(space)\n  //     for (let i = 0, length = tree.length; i < length; i++) {\n  //         // console.log(tree[i].title, space);\n  //         arr.push({\n  //             title: tree[i].title,\n  //             space: space\n  //         })\n  //         if(tree[i].items !== []){\n  //             render(tree[i].items, arr, space+1);\n  //         }\n  //         // space--;    \n  //     }\n  //   return state;  \n  // }\n  console.log(render(tree));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: tre\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = Tree;\nexport default Tree;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TreeItem\");\n$RefreshReg$(_c2, \"Tree\");","map":{"version":3,"sources":["/home/illia/addnote/front/src/Containers/Tree/Tree.js"],"names":["React","useState","render","tree","state","space","arr","map","item","console","log","title","items","TreeItem","Tree","tre"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;AAIA,MAAMC,MAAM,GAAG,CAACC,IAAD,EAAOC,KAAK,GAAC,EAAb,EAAiBC,KAAK,GAAC,GAAvB,KAA+B;AAC1C,MAAIC,GAAG,GAAGF,KAAV;AACAD,EAAAA,IAAI,CAACI,GAAL,CAAUC,IAAD,IAAU;AACf;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAK,GAACG,IAAI,CAACG,KAAvB;;AAEA,QAAGH,IAAI,CAACI,KAAL,KAAe,EAAlB,EAAqB;AACjBV,MAAAA,MAAM,CAACM,IAAI,CAACI,KAAN,EAAaN,GAAb,EAAkBD,KAAK,GAAG,GAA1B,CAAN;AACH;AACJ,GAPD;AAQH,CAVD;;AAYA,MAAMQ,QAAQ,GAAG,CAAC;AAACD,EAAAA;AAAD,CAAD,KAAa,CAE7B,CAFD;;KAAMC,Q;;AAIN,MAAMC,IAAI,GAAG,MAAM;AACf;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEAL,EAAAA,OAAO,CAACC,GAAR,CAAYR,MAAM,CAACC,IAAD,CAAlB;AAIF,sBACE;AAAA,cACKY;AADL;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAlCD;;MAAMD,I;AAoCN,eAAeA,IAAf","sourcesContent":["import React, {useState} from 'react'\n\n  \n\nconst render = (tree, state=[], space=' ') => {\n    let arr = state;\n    tree.map((item) => {\n        // arr = [...arr, item.title] \n        console.log(space+item.title);\n        \n        if(item.items !== []){\n            render(item.items, arr, space + ' ');\n        }          \n    } )\n}\n\nconst TreeItem = ({items}) => {\n\n}\n\nconst Tree = () => {\n    // const [state, setState] = useState([]);     \n\n    // const render = (tree, state=[], space=0) => {\n      \n    //     // console.log(tree[0].title);\n    //     let arr = state;\n    //     // console.log(space)\n    //     for (let i = 0, length = tree.length; i < length; i++) {\n    //         // console.log(tree[i].title, space);\n    //         arr.push({\n    //             title: tree[i].title,\n    //             space: space\n    //         })\n    //         if(tree[i].items !== []){\n    //             render(tree[i].items, arr, space+1);\n    //         }\n    //         // space--;    \n    //     }\n        \n    //   return state;  \n      \n    // }\n\n    console.log(render(tree))\n    \n    \n\n  return (\n    <div>\n        {tre}\n        {/* {render(tree).map((item,i) => <h1 style = {{paddingLeft:item.space*30+'px'}} key={i}>{item.title}</h1>)} */}\n    </div>\n  )\n}\n\nexport default Tree\n"]},"metadata":{},"sourceType":"module"}