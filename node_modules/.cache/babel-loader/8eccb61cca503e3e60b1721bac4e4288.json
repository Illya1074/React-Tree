{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/illia/addnote/front/src/Pages/TreeItem/TreeItem.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport TreeItemWrapper from '../../Containers/TreeItemWrapper/TreeItemWrapper';\nimport TreeItemAdd from '../../Containers/TreeItemAdd/TreeItemAdd';\nimport TreeItemDelete from '../../Containers/TreeItemDelete/TreeItemDelete';\nimport TreeItemFold from '../../Containers/TreeItemFold/TreeItemFold';\nimport TreeItemContent from '../../Containers/TreeItemContent/TreeItemContent';\nimport TreeItemCircle from '../../Containers/TreeItemCircle/TreeItemCircle';\nimport Draggable from '../../Containers/Draggable/Draggable';\nimport Tree from '../Tree/Tree';\nimport './TreeItem.css';\nexport const addNode = 'addNode';\nexport const openNode = 'openAndCloseNode';\nexport const deleteNode = 'deleteNode';\nexport const editTitle = 'editTitle';\n\nconst TreeItem = ({\n  item,\n  eventDispatcher,\n  myLastNode,\n  myDispatch,\n  myNodes,\n  isDragging,\n  isDraggingVal\n}) => {\n  _s();\n\n  const [isDraggingState, setIsDraggingState] = useState(false);\n  const [typing, setTyping] = useState({\n    state: false,\n    timeCode: null,\n    val: item.title\n  });\n  useEffect(() => {\n    return () => {\n      clearTimeout(typing.timeCode);\n    };\n  }, [typing]);\n  useEffect(() => {\n    setIsDraggingState(isDraggingVal);\n  }, [isDraggingVal]);\n\n  async function handleChange(evt) {\n    const timer = setTimeout(() => {\n      console.log(item.title + ' Finish');\n      setTyping({\n        state: false,\n        timeCode: null,\n        val: evt.target.value\n      });\n      eventDispatcher(editTitle, item.id, evt.target.value);\n    }, 1500);\n    setTyping({\n      state: true,\n      timeCode: timer,\n      val: evt.target.value\n    });\n  }\n\n  ;\n\n  const onDrop = id => {\n    if (isDraggingState) {\n      // console.log(isDraggingState)\n      myLastNode(item.title);\n    }\n  };\n\n  const myDispatchFun = () => {\n    // console.log(myNodes) \n    myDispatch(item.title);\n  };\n\n  const isDraggingFun = val => {\n    isDragging(val); // console.log(val)\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"my-tree-node\",\n    style: {\n      paddingLeft: '20px',\n      cursor: 'pointer',\n      paddingTop: '10px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TreeItemWrapper, {\n      onMouseOver: () => onDrop(item.title),\n      children: [/*#__PURE__*/_jsxDEV(Draggable, {\n        onStop: myDispatchFun,\n        isDragging: isDraggingFun,\n        children: /*#__PURE__*/_jsxDEV(TreeItemCircle, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TreeItemContent, {\n        html: typing.state ? typing.val : item.title,\n        onClick: myDispatchFun,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TreeItemFold, {\n        onClick: () => eventDispatcher(openNode, item.id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TreeItemAdd, {\n        onClick: () => eventDispatcher(addNode, item.id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TreeItemDelete, {\n        onClick: () => typing.state ? null : eventDispatcher(deleteNode, item.id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), item.items && item.state === true ? /*#__PURE__*/_jsxDEV(Tree, {\n      items: item.items,\n      eventDispatcher: eventDispatcher,\n      isDragging: isDragging,\n      myNodes: myNodes,\n      myLastNode: myLastNode,\n      myDispatch: myDispatch,\n      isDraggingVal: isDraggingVal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 50\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TreeItem, \"qBDsFofrtmFaGBrdV5E1SBt8Awk=\");\n\n_c = TreeItem;\nexport default TreeItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"TreeItem\");","map":{"version":3,"sources":["/home/illia/addnote/front/src/Pages/TreeItem/TreeItem.js"],"names":["React","useEffect","useState","TreeItemWrapper","TreeItemAdd","TreeItemDelete","TreeItemFold","TreeItemContent","TreeItemCircle","Draggable","Tree","addNode","openNode","deleteNode","editTitle","TreeItem","item","eventDispatcher","myLastNode","myDispatch","myNodes","isDragging","isDraggingVal","isDraggingState","setIsDraggingState","typing","setTyping","state","timeCode","val","title","clearTimeout","handleChange","evt","timer","setTimeout","console","log","target","value","id","onDrop","myDispatchFun","isDraggingFun","paddingLeft","cursor","paddingTop","items"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport TreeItemWrapper from '../../Containers/TreeItemWrapper/TreeItemWrapper'\nimport TreeItemAdd from '../../Containers/TreeItemAdd/TreeItemAdd'\nimport TreeItemDelete from '../../Containers/TreeItemDelete/TreeItemDelete'\nimport TreeItemFold from '../../Containers/TreeItemFold/TreeItemFold'\nimport TreeItemContent from '../../Containers/TreeItemContent/TreeItemContent'\nimport TreeItemCircle from '../../Containers/TreeItemCircle/TreeItemCircle'\nimport Draggable from '../../Containers/Draggable/Draggable'\nimport Tree from '../Tree/Tree'\nimport './TreeItem.css'\n\n\nexport const addNode = 'addNode'\nexport const openNode = 'openAndCloseNode'\nexport const deleteNode = 'deleteNode'\nexport const editTitle = 'editTitle'\n\nconst TreeItem = ({item,eventDispatcher, myLastNode, myDispatch, myNodes, isDragging, isDraggingVal}) => {\n\n    const [isDraggingState,setIsDraggingState] = useState(false)\n    const [typing, setTyping] = useState({\n        state: false,\n        timeCode: null,\n        val: item.title\n    })\n\n    useEffect(() => {\n        return () => {            \n            clearTimeout(typing.timeCode)\n        }\n    },[typing])\n    \n    useEffect(() => {\n        setIsDraggingState(isDraggingVal)\n    }, [isDraggingVal])\n\n    async function handleChange(evt) {\n   \n        const timer = setTimeout(() => {\n            console.log(item.title + ' Finish')\n            setTyping({\n                state: false,\n                timeCode: null,\n                val: evt.target.value\n            })\n            eventDispatcher(editTitle,item.id, evt.target.value)\n        }, 1500)\n        \n        setTyping({\n            state: true,\n            timeCode: timer,\n            val: evt.target.value\n        })\n    \n\n    };\n    \n    \n    const onDrop = (id) => {\n        if(isDraggingState){\n            // console.log(isDraggingState)\n\n            myLastNode(item.title)\n        }\n    }\n    \n\n\n    const myDispatchFun = () => {\n        // console.log(myNodes) \n        myDispatch(item.title)\n    }\n\n\n    const isDraggingFun = (val) => {\n        isDragging(val)\n        // console.log(val)\n    }\n\n    return (\n        <div className=\"my-tree-node\" style={{paddingLeft: '20px', cursor: 'pointer', paddingTop: '10px'}}>\n            <TreeItemWrapper onMouseOver={() => onDrop(item.title)}>\n                <Draggable onStop={myDispatchFun} isDragging={isDraggingFun}>\n                    <TreeItemCircle/>\n                </Draggable>\n                <TreeItemContent html={typing.state ? typing.val : item.title}\n                 onClick={myDispatchFun} onChange={handleChange} />\n                <TreeItemFold onClick={() => eventDispatcher(openNode,item.id)}/>\n                <TreeItemAdd onClick={() => eventDispatcher(addNode,item.id)}/>\n                <TreeItemDelete onClick={() => typing.state ? null : eventDispatcher(deleteNode,item.id)}/>\n                \n            </TreeItemWrapper>\n            {item.items && item.state === true ? <Tree items={item.items} eventDispatcher={eventDispatcher} isDragging={isDragging} myNodes={myNodes} myLastNode={myLastNode}  myDispatch={myDispatch}\n             isDraggingVal={isDraggingVal}/> : null}\n        </div>\n    )\n}\n\nexport default TreeItem\n"]},"metadata":{},"sourceType":"module"}