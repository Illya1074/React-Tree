{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/illia/addnote/front/src/Containers/Tree/Tree.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\n\nconst Tree = () => {\n  _s();\n\n  const [tree, setTree] = useState([{\n    id: '1',\n    title: 'item1',\n    icon: 'folder',\n    state: 'open',\n    items: [{\n      id: '2',\n      title: 'item1.1',\n      icon: 'file',\n      state: 'open',\n      items: [{\n        id: '2',\n        title: 'item1.1.1',\n        icon: 'file',\n        state: 'open',\n        items: []\n      }, {\n        id: '2',\n        title: 'item1.1.2',\n        icon: 'file',\n        state: 'open',\n        items: []\n      }]\n    }]\n  }, {\n    id: '3',\n    title: 'item3',\n    icon: 'folder',\n    state: 'open',\n    items: [{\n      id: '2',\n      title: 'item3.1',\n      icon: 'file',\n      state: 'open',\n      items: []\n    }]\n  }]);\n\n  const render = (tree, state = []) => {\n    tree.map(item => {\n      // console.log(space + item.title);\n      if (item.items !== []) {\n        render(item.items, [item.title, ...state]);\n      }\n\n      return [state];\n    }); // console.log(tree)\n  };\n\n  console.log(render(tree));\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Tree, \"GV7na1stYuS+/pYFaTylbFKctdA=\");\n\n_c = Tree;\nexport default Tree;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"sources":["/home/illia/addnote/front/src/Containers/Tree/Tree.js"],"names":["React","Tree","tree","setTree","useState","id","title","icon","state","items","render","map","item","console","log"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACf,QAAM,CAACC,IAAD,EAAMC,OAAN,IAAiBC,QAAQ,CAAC,CAC9B;AACIC,IAAAA,EAAE,EAAE,GADR;AAEIC,IAAAA,KAAK,EAAE,OAFX;AAGIC,IAAAA,IAAI,EAAE,QAHV;AAIIC,IAAAA,KAAK,EAAE,MAJX;AAKIC,IAAAA,KAAK,EAAE,CACH;AACIJ,MAAAA,EAAE,EAAE,GADR;AAEIC,MAAAA,KAAK,EAAE,SAFX;AAGIC,MAAAA,IAAI,EAAE,MAHV;AAIIC,MAAAA,KAAK,EAAE,MAJX;AAKIC,MAAAA,KAAK,EAAE,CACH;AACIJ,QAAAA,EAAE,EAAE,GADR;AAEIC,QAAAA,KAAK,EAAE,WAFX;AAGIC,QAAAA,IAAI,EAAE,MAHV;AAIIC,QAAAA,KAAK,EAAE,MAJX;AAKIC,QAAAA,KAAK,EAAE;AALX,OADG,EAQH;AACIJ,QAAAA,EAAE,EAAE,GADR;AAEIC,QAAAA,KAAK,EAAE,WAFX;AAGIC,QAAAA,IAAI,EAAE,MAHV;AAIIC,QAAAA,KAAK,EAAE,MAJX;AAKIC,QAAAA,KAAK,EAAE;AALX,OARG;AALX,KADG;AALX,GAD8B,EA+B9B;AACIJ,IAAAA,EAAE,EAAE,GADR;AAEIC,IAAAA,KAAK,EAAE,OAFX;AAGIC,IAAAA,IAAI,EAAE,QAHV;AAIIC,IAAAA,KAAK,EAAE,MAJX;AAKIC,IAAAA,KAAK,EAAE,CACH;AACIJ,MAAAA,EAAE,EAAE,GADR;AAEIC,MAAAA,KAAK,EAAE,SAFX;AAGIC,MAAAA,IAAI,EAAE,MAHV;AAIIC,MAAAA,KAAK,EAAE,MAJX;AAKIC,MAAAA,KAAK,EAAE;AALX,KADG;AALX,GA/B8B,CAAD,CAA/B;;AAgDA,QAAMC,MAAM,GAAG,CAACR,IAAD,EAAOM,KAAK,GAAC,EAAb,KAAoB;AACjCN,IAAAA,IAAI,CAACS,GAAL,CAAUC,IAAD,IAAU;AACf;AACA,UAAGA,IAAI,CAACH,KAAL,KAAe,EAAlB,EAAqB;AACjBC,QAAAA,MAAM,CAACE,IAAI,CAACH,KAAN,EAAa,CAACG,IAAI,CAACN,KAAN,EAAa,GAAGE,KAAhB,CAAb,CAAN;AACH;;AAED,aAAO,CAACA,KAAD,CAAP;AACH,KAPD,EADiC,CASjC;AACD,GAVD;;AAYAK,EAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAACR,IAAD,CAAlB;AAEF,sBACE;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CApED;;GAAMD,I;;KAAAA,I;AAsEN,eAAeA,IAAf","sourcesContent":["import React from 'react'\n\nconst Tree = () => {\n    const [tree,setTree] = useState([\n      {\n          id: '1',\n          title: 'item1', \n          icon: 'folder',\n          state: 'open',\n          items: [\n              {\n                  id: '2',\n                  title: 'item1.1',\n                  icon: 'file',\n                  state: 'open',\n                  items: [\n                      {\n                          id: '2',\n                          title: 'item1.1.1',\n                          icon: 'file',\n                          state: 'open',\n                          items: []\n                      },\n                      {\n                          id: '2',\n                          title: 'item1.1.2',\n                          icon: 'file',\n                          state: 'open',\n                          items: []\n                      }\n                  ]\n              }\n          ]\n      },\n      {\n          id: '3',\n          title: 'item3', \n          icon: 'folder',\n          state: 'open',\n          items: [\n              {\n                  id: '2',\n                  title: 'item3.1',\n                  icon: 'file',\n                  state: 'open',\n                  items: []\n              }\n          ]\n      }\n    ])\n    \n    const render = (tree, state=[]) => {\n      tree.map((item) => {\n          // console.log(space + item.title);\n          if(item.items !== []){\n              render(item.items, [item.title, ...state]);\n          }\n    \n          return [state];\n      } )\n      // console.log(tree)\n    }\n  \n    console.log(render(tree))\n\n  return (\n    <div>\n      \n    </div>\n  )\n}\n\nexport default Tree\n"]},"metadata":{},"sourceType":"module"}