{"ast":null,"code":"const R = require('ramda'); /////////////////////////////////// that function return a path wraped in array to primitive of object which was passed\n\n\nconst findPath = (primitive, object, path = []) => {\n  for (const [key, value] of Object.entries(object)) {\n    if (value === primitive) {\n      return [...path, key];\n    }\n\n    if (typeof value === 'object' || typeof value === 'function') {\n      const newPath = findPath(primitive, value, [...path, key]);\n\n      if (newPath) {\n        return newPath;\n      }\n    }\n  }\n\n  return null;\n}; ///////////////////////////////////// that function return updated state of tree\n\n\nconst openAndClose = (prim, obj) => {\n  const updatedPath = [...findPath(prim, obj).slice(0, findPath(prim, obj).length - 1), 'state'];\n  const composeLense = R.compose(...updatedPath.map(item => isNaN(item) ? R.lensProp(item) : R.lensIndex(parseInt(item))));\n  const boolState = !R.view(composeLense, obj);\n  const newState = R.set(composeLense, boolState, obj);\n  return newState;\n}; ////////////////////////////////////\n\n\nconst addNode = () => {\n  console.log('hi ');\n};\n\nconst tree = (state = [{\n  id: Math.floor(Math.random() * 16777215).toString(16),\n  title: 'item1',\n  icon: 'folder',\n  state: true,\n  items: [{\n    id: Math.floor(Math.random() * 16777215).toString(16),\n    title: 'item1.1',\n    icon: 'file',\n    state: true,\n    items: [{\n      id: Math.floor(Math.random() * 16777215).toString(16),\n      title: 'item1.1.1',\n      icon: 'file',\n      state: true,\n      items: []\n    }, {\n      id: Math.floor(Math.random() * 16777215).toString(16),\n      title: 'item1.1.2',\n      icon: 'file',\n      state: true,\n      items: []\n    }, {\n      id: Math.floor(Math.random() * 16777215).toString(16),\n      title: 'item1.1.3',\n      icon: 'file',\n      state: true,\n      items: []\n    }]\n  }, {\n    id: Math.floor(Math.random() * 16777215).toString(16),\n    title: 'item1.2',\n    icon: 'file',\n    state: true,\n    items: [{\n      id: Math.floor(Math.random() * 16777215).toString(16),\n      title: 'item1.2.1',\n      icon: 'file',\n      state: true,\n      items: []\n    }, {\n      id: Math.floor(Math.random() * 16777215).toString(16),\n      title: 'item1.2.2',\n      icon: 'file',\n      state: true,\n      items: []\n    }]\n  }]\n}, {\n  id: Math.floor(Math.random() * 16777215).toString(16),\n  title: 'item2',\n  icon: 'folder',\n  state: true,\n  items: [{\n    id: Math.floor(Math.random() * 16777215).toString(16),\n    title: 'item2.1',\n    icon: 'file',\n    state: true,\n    items: []\n  }]\n}, {\n  id: Math.floor(Math.random() * 16777215).toString(16),\n  title: 'item3',\n  icon: 'folder',\n  state: true,\n  items: [{\n    id: Math.floor(Math.random() * 16777215).toString(16),\n    title: 'item3.1',\n    icon: 'file',\n    state: true,\n    items: []\n  }]\n}, {\n  id: Math.floor(Math.random() * 16777215).toString(16),\n  title: 'item4',\n  icon: 'folder',\n  state: true,\n  items: [{\n    id: Math.floor(Math.random() * 16777215).toString(16),\n    title: 'item4.1',\n    icon: 'file',\n    state: true,\n    items: []\n  }]\n}], action) => {\n  switch (action.type) {\n    case 'OPEN':\n      return openAndClose(action.id, state);\n\n    case 'ADD_NODE':\n      return addNode(action.id, state);\n  }\n\n  return state;\n};\n\nexport default tree;","map":{"version":3,"sources":["/home/illia/addnote/front/src/Reducers/tree.js"],"names":["R","require","findPath","primitive","object","path","key","value","Object","entries","newPath","openAndClose","prim","obj","updatedPath","slice","length","composeLense","compose","map","item","isNaN","lensProp","lensIndex","parseInt","boolState","view","newState","set","addNode","console","log","tree","state","id","Math","floor","random","toString","title","icon","items","action","type"],"mappings":"AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,OAAD,CAAjB,C,CAGA;;;AAEA,MAAMC,QAAQ,GAAG,CAACC,SAAD,EAAYC,MAAZ,EAAoBC,IAAI,GAAG,EAA3B,KAAkC;AAC/C,OAAK,MAAM,CAACC,GAAD,EAAMC,KAAN,CAAX,IAA2BC,MAAM,CAACC,OAAP,CAAeL,MAAf,CAA3B,EAAmD;AACjD,QAAIG,KAAK,KAAKJ,SAAd,EAAyB;AACvB,aAAO,CAAC,GAAGE,IAAJ,EAAUC,GAAV,CAAP;AACD;;AAED,QAAI,OAAOC,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,UAAlD,EAA8D;AAC5D,YAAMG,OAAO,GAAGR,QAAQ,CAACC,SAAD,EAAYI,KAAZ,EAAmB,CAAC,GAAGF,IAAJ,EAAUC,GAAV,CAAnB,CAAxB;;AACA,UAAII,OAAJ,EAAa;AACX,eAAOA,OAAP;AACD;AACF;AACF;;AACD,SAAO,IAAP;AACD,CAdH,C,CAgBA;;;AAEA,MAAMC,YAAY,GAAG,CAACC,IAAD,EAAOC,GAAP,KAAe;AAEhC,QAAMC,WAAW,GAAG,CAAC,GAAGZ,QAAQ,CAACU,IAAD,EAAMC,GAAN,CAAR,CAAmBE,KAAnB,CAAyB,CAAzB,EAA4Bb,QAAQ,CAACU,IAAD,EAAMC,GAAN,CAAR,CAAmBG,MAAnB,GAA0B,CAAtD,CAAJ,EAA8D,OAA9D,CAApB;AACA,QAAMC,YAAY,GAAGjB,CAAC,CAACkB,OAAF,CAAU,GAAGJ,WAAW,CAACK,GAAZ,CAAgBC,IAAI,IAAIC,KAAK,CAACD,IAAD,CAAL,GAAcpB,CAAC,CAACsB,QAAF,CAAWF,IAAX,CAAd,GAAiCpB,CAAC,CAACuB,SAAF,CAAYC,QAAQ,CAACJ,IAAD,CAApB,CAAzD,CAAb,CAArB;AACA,QAAMK,SAAS,GAAG,CAACzB,CAAC,CAAC0B,IAAF,CAAOT,YAAP,EAAqBJ,GAArB,CAAnB;AACA,QAAMc,QAAQ,GAAG3B,CAAC,CAAC4B,GAAF,CAAMX,YAAN,EAAoBQ,SAApB,EAA+BZ,GAA/B,CAAjB;AAEA,SAAOc,QAAP;AACH,CARD,C,CAUA;;;AAEA,MAAME,OAAO,GAAG,MAAM;AAClBC,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACH,CAFD;;AAIA,MAAMC,IAAI,GAAG,CAACC,KAAK,GAAI,CACnB;AACIC,EAAAA,EAAE,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,QAAzB,EAAmCC,QAAnC,CAA4C,EAA5C,CADR;AAEIC,EAAAA,KAAK,EAAE,OAFX;AAGIC,EAAAA,IAAI,EAAE,QAHV;AAIIP,EAAAA,KAAK,EAAE,IAJX;AAKIQ,EAAAA,KAAK,EAAE,CACH;AACIP,IAAAA,EAAE,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,QAAzB,EAAmCC,QAAnC,CAA4C,EAA5C,CADR;AAEIC,IAAAA,KAAK,EAAE,SAFX;AAGIC,IAAAA,IAAI,EAAE,MAHV;AAIIP,IAAAA,KAAK,EAAE,IAJX;AAKIQ,IAAAA,KAAK,EAAE,CACH;AACIP,MAAAA,EAAE,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,QAAzB,EAAmCC,QAAnC,CAA4C,EAA5C,CADR;AAEIC,MAAAA,KAAK,EAAE,WAFX;AAGIC,MAAAA,IAAI,EAAE,MAHV;AAIIP,MAAAA,KAAK,EAAE,IAJX;AAKIQ,MAAAA,KAAK,EAAE;AALX,KADG,EAQH;AACIP,MAAAA,EAAE,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,QAAzB,EAAmCC,QAAnC,CAA4C,EAA5C,CADR;AAEIC,MAAAA,KAAK,EAAE,WAFX;AAGIC,MAAAA,IAAI,EAAE,MAHV;AAIIP,MAAAA,KAAK,EAAE,IAJX;AAKIQ,MAAAA,KAAK,EAAE;AALX,KARG,EAeH;AACIP,MAAAA,EAAE,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,QAAzB,EAAmCC,QAAnC,CAA4C,EAA5C,CADR;AAEIC,MAAAA,KAAK,EAAE,WAFX;AAGIC,MAAAA,IAAI,EAAE,MAHV;AAIIP,MAAAA,KAAK,EAAE,IAJX;AAKIQ,MAAAA,KAAK,EAAE;AALX,KAfG;AALX,GADG,EA8BH;AACEP,IAAAA,EAAE,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,QAAzB,EAAmCC,QAAnC,CAA4C,EAA5C,CADN;AAEEC,IAAAA,KAAK,EAAE,SAFT;AAGEC,IAAAA,IAAI,EAAE,MAHR;AAIEP,IAAAA,KAAK,EAAE,IAJT;AAKEQ,IAAAA,KAAK,EAAE,CACH;AACIP,MAAAA,EAAE,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,QAAzB,EAAmCC,QAAnC,CAA4C,EAA5C,CADR;AAEIC,MAAAA,KAAK,EAAE,WAFX;AAGIC,MAAAA,IAAI,EAAE,MAHV;AAIIP,MAAAA,KAAK,EAAE,IAJX;AAKIQ,MAAAA,KAAK,EAAE;AALX,KADG,EAQH;AACIP,MAAAA,EAAE,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,QAAzB,EAAmCC,QAAnC,CAA4C,EAA5C,CADR;AAEIC,MAAAA,KAAK,EAAE,WAFX;AAGIC,MAAAA,IAAI,EAAE,MAHV;AAIIP,MAAAA,KAAK,EAAE,IAJX;AAKIQ,MAAAA,KAAK,EAAE;AALX,KARG;AALT,GA9BG;AALX,CADmB,EA4DnB;AACIP,EAAAA,EAAE,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,QAAzB,EAAmCC,QAAnC,CAA4C,EAA5C,CADR;AAEIC,EAAAA,KAAK,EAAE,OAFX;AAGIC,EAAAA,IAAI,EAAE,QAHV;AAIIP,EAAAA,KAAK,EAAE,IAJX;AAKIQ,EAAAA,KAAK,EAAE,CACH;AACIP,IAAAA,EAAE,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,QAAzB,EAAmCC,QAAnC,CAA4C,EAA5C,CADR;AAEIC,IAAAA,KAAK,EAAE,SAFX;AAGIC,IAAAA,IAAI,EAAE,MAHV;AAIIP,IAAAA,KAAK,EAAE,IAJX;AAKIQ,IAAAA,KAAK,EAAE;AALX,GADG;AALX,CA5DmB,EA2EnB;AACIP,EAAAA,EAAE,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,QAAzB,EAAmCC,QAAnC,CAA4C,EAA5C,CADR;AAEIC,EAAAA,KAAK,EAAE,OAFX;AAGIC,EAAAA,IAAI,EAAE,QAHV;AAIIP,EAAAA,KAAK,EAAE,IAJX;AAKIQ,EAAAA,KAAK,EAAE,CACH;AACIP,IAAAA,EAAE,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,QAAzB,EAAmCC,QAAnC,CAA4C,EAA5C,CADR;AAEIC,IAAAA,KAAK,EAAE,SAFX;AAGIC,IAAAA,IAAI,EAAE,MAHV;AAIIP,IAAAA,KAAK,EAAE,IAJX;AAKIQ,IAAAA,KAAK,EAAE;AALX,GADG;AALX,CA3EmB,EA0FnB;AACIP,EAAAA,EAAE,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,QAAzB,EAAmCC,QAAnC,CAA4C,EAA5C,CADR;AAEIC,EAAAA,KAAK,EAAE,OAFX;AAGIC,EAAAA,IAAI,EAAE,QAHV;AAIIP,EAAAA,KAAK,EAAE,IAJX;AAKIQ,EAAAA,KAAK,EAAE,CACH;AACIP,IAAAA,EAAE,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,QAAzB,EAAmCC,QAAnC,CAA4C,EAA5C,CADR;AAEIC,IAAAA,KAAK,EAAE,SAFX;AAGIC,IAAAA,IAAI,EAAE,MAHV;AAIIP,IAAAA,KAAK,EAAE,IAJX;AAKIQ,IAAAA,KAAK,EAAE;AALX,GADG;AALX,CA1FmB,CAAV,EAyGVC,MAzGU,KAyGC;AACV,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,MAAL;AACI,aAAOhC,YAAY,CAAC+B,MAAM,CAACR,EAAR,EAAYD,KAAZ,CAAnB;;AACJ,SAAK,UAAL;AACI,aAAOJ,OAAO,CAACa,MAAM,CAACR,EAAR,EAAYD,KAAZ,CAAd;AAJR;;AAMA,SAAOA,KAAP;AACH,CAjHD;;AAmHA,eAAeD,IAAf","sourcesContent":["\n\nconst R = require('ramda')\n\n\n/////////////////////////////////// that function return a path wraped in array to primitive of object which was passed\n\nconst findPath = (primitive, object, path = []) => {\n    for (const [key, value] of Object.entries(object)) {\n      if (value === primitive) {\n        return [...path, key];\n      }\n      \n      if (typeof value === 'object' || typeof value === 'function') {\n        const newPath = findPath(primitive, value, [...path, key]);\n        if (newPath) {\n          return newPath;\n        }\n      }\n    }\n    return null;\n  }\n\n///////////////////////////////////// that function return updated state of tree\n\nconst openAndClose = (prim, obj) => {\n    \n    const updatedPath = [...findPath(prim,obj).slice(0, findPath(prim,obj).length-1), 'state']\n    const composeLense = R.compose(...updatedPath.map(item => isNaN(item) ? R.lensProp(item) : R.lensIndex(parseInt(item))));\n    const boolState = !R.view(composeLense, obj);\n    const newState = R.set(composeLense, boolState, obj);\n    \n    return newState;\n}\n\n////////////////////////////////////\n\nconst addNode = () => {\n    console.log('hi ')\n}\n\nconst tree = (state =  [\n    {\n        id: Math.floor(Math.random()*16777215).toString(16),\n        title: 'item1', \n        icon: 'folder',\n        state: true,\n        items: [\n            {\n                id: Math.floor(Math.random()*16777215).toString(16),\n                title: 'item1.1',\n                icon: 'file',\n                state: true,\n                items: [\n                    {\n                        id: Math.floor(Math.random()*16777215).toString(16),\n                        title: 'item1.1.1',\n                        icon: 'file',\n                        state: true,\n                        items: []\n                    },\n                    {\n                        id: Math.floor(Math.random()*16777215).toString(16),\n                        title: 'item1.1.2',\n                        icon: 'file',\n                        state: true,\n                        items: []\n                    },\n                    {\n                        id: Math.floor(Math.random()*16777215).toString(16),\n                        title: 'item1.1.3',\n                        icon: 'file',\n                        state: true,\n                        items: []\n                    }\n                ]\n            },\n            {\n              id: Math.floor(Math.random()*16777215).toString(16),\n              title: 'item1.2',\n              icon: 'file',\n              state: true,\n              items: [\n                  {\n                      id: Math.floor(Math.random()*16777215).toString(16),\n                      title: 'item1.2.1',\n                      icon: 'file',\n                      state: true,\n                      items: []\n                  },\n                  {\n                      id: Math.floor(Math.random()*16777215).toString(16),\n                      title: 'item1.2.2',\n                      icon: 'file',\n                      state: true,\n                      items: []\n                  }\n              ]\n          }\n        ]\n    },\n    {\n        id: Math.floor(Math.random()*16777215).toString(16),\n        title: 'item2', \n        icon: 'folder',\n        state: true,\n        items: [\n            {\n                id: Math.floor(Math.random()*16777215).toString(16),\n                title: 'item2.1',\n                icon: 'file',\n                state: true,\n                items: []\n            }\n        ]\n    },\n    {\n        id: Math.floor(Math.random()*16777215).toString(16),\n        title: 'item3', \n        icon: 'folder',\n        state: true,\n        items: [\n            {\n                id: Math.floor(Math.random()*16777215).toString(16),\n                title: 'item3.1',\n                icon: 'file',\n                state: true,\n                items: []\n            }\n        ]\n    },\n    {\n        id: Math.floor(Math.random()*16777215).toString(16),\n        title: 'item4', \n        icon: 'folder',\n        state: true,\n        items: [\n            {\n                id: Math.floor(Math.random()*16777215).toString(16),\n                title: 'item4.1',\n                icon: 'file',\n                state: true,\n                items: []\n            }\n        ]\n    }\n], action) => {\n    switch(action.type){\n        case 'OPEN':\n            return openAndClose(action.id, state);\n        case 'ADD_NODE':\n            return addNode(action.id, state);\n    }\n    return state;   \n}\n\nexport default tree;"]},"metadata":{},"sourceType":"module"}