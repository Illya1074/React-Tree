{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/illia/addnote/front/src/Layout.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Tree from './Containers/Tree/Tree';\n\nconst Layout = ({\n  location\n}) => {\n  _s();\n\n  const [tree, setTree] = useState([{\n    id: '1',\n    title: 'item1',\n    icon: 'folder',\n    state: 'open',\n    items: [{\n      id: '2',\n      title: 'item1.1',\n      icon: 'file',\n      state: 'open',\n      items: [{\n        id: '2',\n        title: 'item1.1.1',\n        icon: 'file',\n        state: 'open',\n        items: []\n      }, {\n        id: '2',\n        title: 'item1.1.2',\n        icon: 'file',\n        state: 'open',\n        items: []\n      }]\n    }]\n  }, {\n    id: '3',\n    title: 'item3',\n    icon: 'folder',\n    state: 'open',\n    items: [{\n      id: '2',\n      title: 'item3.1',\n      icon: 'file',\n      state: 'open',\n      items: []\n    }]\n  }]);\n\n  const render = (tree, space) => {\n    tree.map(item => {\n      console.log(space + item.title);\n\n      if (item.items !== []) {\n        render(item.items, space + \" \");\n      }\n    }); // console.log(tree)\n  }; // render(tree, \" \");\n\n\n  const arr = ['hello', 'bye']; // console.log(obj);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Tree, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(Layout, \"RGxvNx60wRTqEiOy9Q/vE8yORwU=\");\n\n_c = Layout;\nexport default Layout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Layout\");","map":{"version":3,"sources":["/home/illia/addnote/front/src/Layout.js"],"names":["React","useState","Tree","Layout","location","tree","setTree","id","title","icon","state","items","render","space","map","item","console","log","arr"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,IAAP,MAAiB,wBAAjB;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAAA;;AAI3B,QAAM,CAACC,IAAD,EAAMC,OAAN,IAAiBL,QAAQ,CAAC,CAC5B;AACIM,IAAAA,EAAE,EAAE,GADR;AAEIC,IAAAA,KAAK,EAAE,OAFX;AAGIC,IAAAA,IAAI,EAAE,QAHV;AAIIC,IAAAA,KAAK,EAAE,MAJX;AAKIC,IAAAA,KAAK,EAAE,CACH;AACIJ,MAAAA,EAAE,EAAE,GADR;AAEIC,MAAAA,KAAK,EAAE,SAFX;AAGIC,MAAAA,IAAI,EAAE,MAHV;AAIIC,MAAAA,KAAK,EAAE,MAJX;AAKIC,MAAAA,KAAK,EAAE,CACH;AACIJ,QAAAA,EAAE,EAAE,GADR;AAEIC,QAAAA,KAAK,EAAE,WAFX;AAGIC,QAAAA,IAAI,EAAE,MAHV;AAIIC,QAAAA,KAAK,EAAE,MAJX;AAKIC,QAAAA,KAAK,EAAE;AALX,OADG,EAQH;AACIJ,QAAAA,EAAE,EAAE,GADR;AAEIC,QAAAA,KAAK,EAAE,WAFX;AAGIC,QAAAA,IAAI,EAAE,MAHV;AAIIC,QAAAA,KAAK,EAAE,MAJX;AAKIC,QAAAA,KAAK,EAAE;AALX,OARG;AALX,KADG;AALX,GAD4B,EA+B5B;AACIJ,IAAAA,EAAE,EAAE,GADR;AAEIC,IAAAA,KAAK,EAAE,OAFX;AAGIC,IAAAA,IAAI,EAAE,QAHV;AAIIC,IAAAA,KAAK,EAAE,MAJX;AAKIC,IAAAA,KAAK,EAAE,CACH;AACIJ,MAAAA,EAAE,EAAE,GADR;AAEIC,MAAAA,KAAK,EAAE,SAFX;AAGIC,MAAAA,IAAI,EAAE,MAHV;AAIIC,MAAAA,KAAK,EAAE,MAJX;AAKIC,MAAAA,KAAK,EAAE;AALX,KADG;AALX,GA/B4B,CAAD,CAA/B;;AAgDA,QAAMC,MAAM,GAAG,CAACP,IAAD,EAAOQ,KAAP,KAAiB;AAC5BR,IAAAA,IAAI,CAACS,GAAL,CAAUC,IAAD,IAAU;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,GAAGE,IAAI,CAACP,KAAzB;;AACA,UAAGO,IAAI,CAACJ,KAAL,KAAe,EAAlB,EAAqB;AACjBC,QAAAA,MAAM,CAACG,IAAI,CAACJ,KAAN,EAAaE,KAAK,GAAC,GAAnB,CAAN;AACH;AACJ,KALD,EAD4B,CAO5B;AACH,GARD,CApD2B,CA8D3B;;;AAEA,QAAMK,GAAG,GAAG,CAAC,OAAD,EAAU,KAAV,CAAZ,CAhE2B,CAoE3B;;AAEA,sBAEI;AAAA,2BACI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AADJ,mBAFJ;AAUH,CAhFD;;GAAMf,M;;KAAAA,M;AAkFN,eAAeA,MAAf","sourcesContent":["import React, {useState} from 'react'\nimport Tree from './Containers/Tree/Tree'\n\nconst Layout = ({location}) => {\n    \n    \n\n    const [tree,setTree] = useState([\n        {\n            id: '1',\n            title: 'item1', \n            icon: 'folder',\n            state: 'open',\n            items: [\n                {\n                    id: '2',\n                    title: 'item1.1',\n                    icon: 'file',\n                    state: 'open',\n                    items: [\n                        {\n                            id: '2',\n                            title: 'item1.1.1',\n                            icon: 'file',\n                            state: 'open',\n                            items: []\n                        },\n                        {\n                            id: '2',\n                            title: 'item1.1.2',\n                            icon: 'file',\n                            state: 'open',\n                            items: []\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            id: '3',\n            title: 'item3', \n            icon: 'folder',\n            state: 'open',\n            items: [\n                {\n                    id: '2',\n                    title: 'item3.1',\n                    icon: 'file',\n                    state: 'open',\n                    items: []\n                }\n            ]\n        }\n    ])\n\n    const render = (tree, space) => {\n        tree.map((item) => {\n            console.log(space + item.title);\n            if(item.items !== []){\n                render(item.items, space+\" \");\n            }\n        } )\n        // console.log(tree)\n    }\n\n    // render(tree, \" \");\n\n    const arr = ['hello', 'bye']\n\n    \n\n    // console.log(obj);\n\n    return (\n        \n        <>\n            <Tree/>\n            {/* {\n                tree.map(item => <h1>{item.title}</h1>)\n            } */}\n\n        </>\n    )\n}\n\nexport default Layout\n"]},"metadata":{},"sourceType":"module"}