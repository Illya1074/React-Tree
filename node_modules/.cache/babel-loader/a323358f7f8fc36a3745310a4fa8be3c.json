{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/illia/addnote/front/src/Containers/Tree/Tree.js\";\nimport React, { useState } from 'react';\nconst tree = [{\n  id: '1',\n  route: 1,\n  title: 'item1',\n  icon: 'folder',\n  state: 'open',\n  items: [{\n    id: '2',\n    route: 11,\n    title: 'item1.1',\n    icon: 'file',\n    state: 'open',\n    items: [{\n      id: '2',\n      route: 111,\n      title: 'item1.1.1',\n      icon: 'file',\n      state: 'open',\n      items: []\n    }, {\n      id: '2',\n      route: 112,\n      title: 'item1.1.2',\n      icon: 'file',\n      state: 'open',\n      items: []\n    }, {\n      id: '2',\n      route: 113,\n      title: 'item1.1.3',\n      icon: 'file',\n      state: 'open',\n      items: []\n    }]\n  }, {\n    id: '2.2',\n    route: 12,\n    title: 'item1.2',\n    icon: 'file',\n    state: 'open',\n    items: [{\n      id: '2',\n      route: 121,\n      title: 'item1.2.1',\n      icon: 'file',\n      state: 'open',\n      items: []\n    }, {\n      id: '2',\n      route: 122,\n      title: 'item1.2.2',\n      icon: 'file',\n      state: 'open',\n      items: []\n    }]\n  }]\n}, {\n  id: '3',\n  route: 2,\n  title: 'item2',\n  icon: 'folder',\n  state: 'open',\n  items: [{\n    id: '2',\n    route: 21,\n    title: 'item2.1',\n    icon: 'file',\n    state: 'open',\n    items: []\n  }]\n}, {\n  id: '3',\n  route: 3,\n  title: 'item3',\n  icon: 'folder',\n  state: 'open',\n  items: [{\n    id: '2',\n    route: 31,\n    title: 'item3.1',\n    icon: 'file',\n    state: 'open',\n    items: []\n  }]\n}, {\n  id: '6',\n  route: 4,\n  title: 'item4',\n  icon: 'folder',\n  state: 'open',\n  items: [{\n    id: '2',\n    route: 41,\n    title: 'item4.1',\n    icon: 'file',\n    state: 'open',\n    items: []\n  }]\n}];\n\nconst render = (tree, state = [], space = ' ') => {\n  let arr = state;\n  tree.map(item => {\n    // arr = [...arr, item.title] \n    console.log(space + item.title);\n\n    if (item.items !== []) {\n      render(item.items, arr, space + ' ');\n    }\n  });\n};\n\nconst Tree = () => {\n  // const [state, setState] = useState([]);     \n  // const render = (tree, state=[], space=0) => {\n  //     // console.log(tree[0].title);\n  //     let arr = state;\n  //     // console.log(space)\n  //     for (let i = 0, length = tree.length; i < length; i++) {\n  //         // console.log(tree[i].title, space);\n  //         arr.push({\n  //             title: tree[i].title,\n  //             space: space\n  //         })\n  //         if(tree[i].items !== []){\n  //             render(tree[i].items, arr, space+1);\n  //         }\n  //         // space--;    \n  //     }\n  //   return state;  \n  // }\n  console.log(render(tree));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(TreeItem, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Tree;\nexport default Tree;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"sources":["/home/illia/addnote/front/src/Containers/Tree/Tree.js"],"names":["React","useState","tree","id","route","title","icon","state","items","render","space","arr","map","item","console","log","Tree"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\n\nconst tree = [\n    {\n        id: '1',\n        route:1,\n        title: 'item1', \n        icon: 'folder',\n        state: 'open',\n        items: [\n            {\n                id: '2',\n                route: 11,\n                title: 'item1.1',\n                icon: 'file',\n                state: 'open',\n                items: [\n                    {\n                        id: '2',\n                        route: 111,\n                        title: 'item1.1.1',\n                        icon: 'file',\n                        state: 'open',\n                        items: []\n                    },\n                    {\n                        id: '2',\n                        route: 112,\n                        title: 'item1.1.2',\n                        icon: 'file',\n                        state: 'open',\n                        items: []\n                    },\n                    {\n                        id: '2',\n                        route: 113,\n                        title: 'item1.1.3',\n                        icon: 'file',\n                        state: 'open',\n                        items: []\n                    }\n                ]\n            },\n            {\n              id: '2.2',\n              route: 12,\n              title: 'item1.2',\n              icon: 'file',\n              state: 'open',\n              items: [\n                  {\n                      id: '2',\n                      route: 121,\n                      title: 'item1.2.1',\n                      icon: 'file',\n                      state: 'open',\n                      items: []\n                  },\n                  {\n                      id: '2',\n                      route: 122,\n                      title: 'item1.2.2',\n                      icon: 'file',\n                      state: 'open',\n                      items: []\n                  }\n              ]\n          }\n        ]\n    },\n    {\n        id: '3',\n        route: 2,\n        title: 'item2', \n        icon: 'folder',\n        state: 'open',\n        items: [\n            {\n                id: '2',\n                route: 21,\n                title: 'item2.1',\n                icon: 'file',\n                state: 'open',\n                items: []\n            }\n        ]\n    },\n    {\n        id: '3',\n        route: 3,\n        title: 'item3', \n        icon: 'folder',\n        state: 'open',\n        items: [\n            {\n                id: '2',\n                route: 31,\n                title: 'item3.1',\n                icon: 'file',\n                state: 'open',\n                items: []\n            }\n        ]\n    },\n    {\n        id: '6',\n        route: 4,\n        title: 'item4', \n        icon: 'folder',\n        state: 'open',\n        items: [\n            {\n                id: '2',\n                route: 41,\n                title: 'item4.1',\n                icon: 'file',\n                state: 'open',\n                items: []\n            }\n        ]\n    }\n];\n  \n\nconst render = (tree, state=[], space=' ') => {\n    let arr = state;\n    tree.map((item) => {\n        // arr = [...arr, item.title] \n        console.log(space+item.title);\n        \n        if(item.items !== []){\n            render(item.items, arr, space + ' ');\n        }          \n    } )\n}\n\nconst Tree = () => {\n    // const [state, setState] = useState([]);     \n\n    // const render = (tree, state=[], space=0) => {\n      \n    //     // console.log(tree[0].title);\n    //     let arr = state;\n    //     // console.log(space)\n    //     for (let i = 0, length = tree.length; i < length; i++) {\n    //         // console.log(tree[i].title, space);\n    //         arr.push({\n    //             title: tree[i].title,\n    //             space: space\n    //         })\n    //         if(tree[i].items !== []){\n    //             render(tree[i].items, arr, space+1);\n    //         }\n    //         // space--;    \n    //     }\n        \n    //   return state;  \n      \n    // }\n\n    console.log(render(tree))\n    \n    \n\n  return (\n    <div>\n        <TreeItem/>\n        {/* {render(tree).map((item,i) => <h1 style = {{paddingLeft:item.space*30+'px'}} key={i}>{item.title}</h1>)} */}\n    </div>\n  )\n}\n\nexport default Tree\n"]},"metadata":{},"sourceType":"module"}