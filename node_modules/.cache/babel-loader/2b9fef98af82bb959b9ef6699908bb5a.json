{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/illia/addnote/front/src/Containers/Tree/Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './Tree.css';\nimport ContentEditable from 'react-contenteditable';\nimport Circle from '../Circle/Circle';\nimport Draggable from 'react-draggable';\nexport const addNode = 'addNode';\nexport const openNode = 'openAndCloseNode';\nexport const deleteNode = 'deleteNode';\nexport const editTitle = 'editTitle';\n\nconst TreeItem = ({\n  item,\n  eventDispatcher,\n  myLastNode,\n  myDispatch,\n  myNodes,\n  isDragging,\n  isDraggingVal\n}) => {\n  _s();\n\n  const [isDraggingState, setIsDraggingState] = useState(false);\n  const [typing, setTyping] = useState({\n    state: false,\n    timeCode: null,\n    val: item.title\n  });\n  useEffect(() => {\n    return () => {\n      clearTimeout(typing.timeCode);\n    };\n  }, [typing]);\n  useEffect(() => {\n    setIsDraggingState(isDraggingVal);\n  }, [isDraggingVal]);\n\n  async function handleChange(evt) {\n    const timer = setTimeout(() => {\n      console.log(item.title + ' Finish');\n      setTyping({\n        state: false,\n        timeCode: null,\n        val: evt.target.value\n      });\n      eventDispatcher(editTitle, item.id, evt.target.value);\n    }, 1500);\n    setTyping({\n      state: true,\n      timeCode: timer,\n      val: evt.target.value\n    });\n  }\n\n  ;\n\n  const onDrop = id => {\n    if (isDraggingState) {\n      // console.log(isDraggingState)\n      myLastNode(item.title);\n    }\n  };\n\n  const myDispatchFun = () => {\n    // console.log(myNodes) \n    myDispatch(item.title);\n  };\n\n  const isDraggingFun = val => {\n    isDragging(val); // console.log(val)\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tree_node\",\n    style: {\n      paddingLeft: '20px',\n      cursor: 'pointer',\n      paddingTop: '10px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Circle, {\n      myDispatch: myDispatchFun,\n      isDragging: isDraggingFun\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: isDraggingState ? \"tree_node_item active\" : \"tree_node_item\",\n      style: {\n        zIndex: '100'\n      },\n      onMouseOver: () => onDrop(item.title),\n      children: [/*#__PURE__*/_jsxDEV(ContentEditable, {\n        className: \"tree_node_item_add-button\",\n        html: typing.state ? typing.val : item.title,\n        onClick: myDispatchFun,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"tree_node_item_add-button\",\n        onClick: () => eventDispatcher(openNode, item.id),\n        children: \"^\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"tree_node_item_add-button\",\n        onClick: () => eventDispatcher(addNode, item.id),\n        children: \"add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"tree_node_item_add-button\",\n        onClick: () => typing.state ? null : eventDispatcher(deleteNode, item.id),\n        children: \"del\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: isDraggingState ? \"myBar active\" : \"myBar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), item.items && item.state === true ? /*#__PURE__*/_jsxDEV(Tree, {\n      items: item.items,\n      eventDispatcher: eventDispatcher,\n      isDragging: isDraggingFun,\n      myNodes: myNodes,\n      myLastNode: myLastNode,\n      myDispatch: myDispatch,\n      isDraggingVal: isDraggingVal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 50\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TreeItem, \"qBDsFofrtmFaGBrdV5E1SBt8Awk=\");\n\n_c = TreeItem;\n\nconst Tree = ({\n  items,\n  eventDispatcher,\n  myLastNode,\n  myDispatch,\n  myNodes,\n  isDragging,\n  isDraggingVal\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: items.map((i, key) => /*#__PURE__*/_jsxDEV(TreeItem, {\n    item: i,\n    myLastNode: myLastNode,\n    myDispatch: myDispatch,\n    eventDispatcher: eventDispatcher,\n    isDragging: isDragging,\n    isDraggingVal: isDraggingVal,\n    myNodes: myNodes\n  }, key, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 28\n  }, this))\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 99,\n  columnNumber: 104\n}, this);\n\n_c2 = Tree;\nexport default Tree;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TreeItem\");\n$RefreshReg$(_c2, \"Tree\");","map":{"version":3,"sources":["/home/illia/addnote/front/src/Containers/Tree/Tree.js"],"names":["React","useEffect","useState","ContentEditable","Circle","Draggable","addNode","openNode","deleteNode","editTitle","TreeItem","item","eventDispatcher","myLastNode","myDispatch","myNodes","isDragging","isDraggingVal","isDraggingState","setIsDraggingState","typing","setTyping","state","timeCode","val","title","clearTimeout","handleChange","evt","timer","setTimeout","console","log","target","value","id","onDrop","myDispatchFun","isDraggingFun","paddingLeft","cursor","paddingTop","zIndex","items","Tree","map","i","key"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport './Tree.css';\nimport ContentEditable from 'react-contenteditable'\nimport Circle from '../Circle/Circle'\nimport Draggable from 'react-draggable';\n\nexport const addNode = 'addNode'\nexport const openNode = 'openAndCloseNode'\nexport const deleteNode = 'deleteNode'\nexport const editTitle = 'editTitle'\n\nconst TreeItem = ({item,eventDispatcher, myLastNode, myDispatch, myNodes, isDragging, isDraggingVal}) => {\n    \n    const [isDraggingState,setIsDraggingState] = useState(false)\n    const [typing, setTyping] = useState({\n        state: false,\n        timeCode: null,\n        val: item.title\n    })\n\n    useEffect(() => {\n        return () => {            \n            clearTimeout(typing.timeCode)\n        }\n    },[typing])\n    \n    useEffect(() => {\n        setIsDraggingState(isDraggingVal)\n    }, [isDraggingVal])\n\n    async function handleChange(evt) {\n\n       \n        const timer = setTimeout(() => {\n            console.log(item.title + ' Finish')\n            setTyping({\n                state: false,\n                timeCode: null,\n                val: evt.target.value\n            })\n            eventDispatcher(editTitle,item.id, evt.target.value)\n        }, 1500)\n        \n        setTyping({\n            state: true,\n            timeCode: timer,\n            val: evt.target.value\n        })\n    \n\n    };\n    \n    \n    const onDrop = (id) => {\n        if(isDraggingState){\n            // console.log(isDraggingState)\n\n            myLastNode(item.title)\n        }\n    }\n    \n\n\n    const myDispatchFun = () => {\n        // console.log(myNodes) \n        myDispatch(item.title)\n    }\n\n\n    const isDraggingFun = (val) => {\n        isDragging(val)\n        // console.log(val)\n    }\n\n    \n\n    return (\n        <div className=\"tree_node\" style={{paddingLeft: '20px', cursor: 'pointer', paddingTop: '10px'}}>\n            <Circle myDispatch={myDispatchFun} isDragging={isDraggingFun}/>\n            \n            <div className={isDraggingState ? \"tree_node_item active\" : \"tree_node_item\"} style={{zIndex:'100'}}  onMouseOver={() => onDrop(item.title)}>\n            \n                <ContentEditable className='tree_node_item_add-button' html={typing.state ? typing.val : item.title}\n                 onClick={myDispatchFun} onChange={handleChange} />\n                <h5 className='tree_node_item_add-button'  onClick={() => eventDispatcher(openNode,item.id)}>^</h5>\n                <h5 className='tree_node_item_add-button'  onClick={() => eventDispatcher(addNode,item.id)}>add</h5>\n                <h5 className='tree_node_item_add-button'  onClick={() => typing.state ? null : eventDispatcher(deleteNode,item.id)}>del</h5>\n                \n            </div>\n            <div className={isDraggingState ? \"myBar active\" : \"myBar\"}></div>\n            {item.items && item.state === true ? <Tree items={item.items} eventDispatcher={eventDispatcher} isDragging={isDraggingFun} myNodes={myNodes} myLastNode={myLastNode}  myDispatch={myDispatch}\n             isDraggingVal={isDraggingVal}/> : null}\n        </div>\n    )\n} \n        \n\n\nconst Tree = ({items, eventDispatcher, myLastNode, myDispatch, myNodes, isDragging, isDraggingVal}) => <div>\n    {items.map((i, key) => <TreeItem  key={key} item={i} myLastNode={myLastNode} myDispatch={myDispatch} eventDispatcher={eventDispatcher} \n    isDragging={isDragging} isDraggingVal={isDraggingVal} myNodes={myNodes}/>)}    \n</div>\n\n\nexport default Tree;"]},"metadata":{},"sourceType":"module"}