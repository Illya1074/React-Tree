{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/illia/addnote/front/src/Containers/Tree/Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\n\nconst Tree = () => {\n  _s();\n\n  const [state, setState] = useState();\n  const [tree, setTree] = useState([{\n    id: '1',\n    title: 'item1',\n    icon: 'folder',\n    state: 'open',\n    items: [{\n      id: '2',\n      title: 'item1.1',\n      icon: 'file',\n      state: 'open',\n      items: [{\n        id: '2',\n        title: 'item1.1.1',\n        icon: 'file',\n        state: 'open',\n        items: []\n      }, {\n        id: '2',\n        title: 'item1.1.2',\n        icon: 'file',\n        state: 'open',\n        items: []\n      }]\n    }]\n  }, {\n    id: '3',\n    title: 'item3',\n    icon: 'folder',\n    state: 'open',\n    items: [{\n      id: '2',\n      title: 'item3.1',\n      icon: 'file',\n      state: 'open',\n      items: []\n    }]\n  }]);\n  let arr;\n\n  const render = (tree, state = []) => {\n    console.log(arr);\n    tree.map(item => {\n      arr = [...arr, item.title]; // console.log(item.title, arr);\n      // addItemToState(item)\n      // setState([...state, item.title])\n\n      if (item.items !== []) {\n        render(item.items, arr);\n      }\n    }); // return state;  \n    // console.log(tree)\n  };\n\n  console.log(render(tree));\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Tree, \"L5sS9/0/qlJDYhQfXjI6hxWYBcg=\");\n\n_c = Tree;\nexport default Tree;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"sources":["/home/illia/addnote/front/src/Containers/Tree/Tree.js"],"names":["React","useState","Tree","state","setState","tree","setTree","id","title","icon","items","arr","render","console","log","map","item"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACf,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,EAAlC;AACA,QAAM,CAACI,IAAD,EAAMC,OAAN,IAAiBL,QAAQ,CAAC,CAC9B;AACIM,IAAAA,EAAE,EAAE,GADR;AAEIC,IAAAA,KAAK,EAAE,OAFX;AAGIC,IAAAA,IAAI,EAAE,QAHV;AAIIN,IAAAA,KAAK,EAAE,MAJX;AAKIO,IAAAA,KAAK,EAAE,CACH;AACIH,MAAAA,EAAE,EAAE,GADR;AAEIC,MAAAA,KAAK,EAAE,SAFX;AAGIC,MAAAA,IAAI,EAAE,MAHV;AAIIN,MAAAA,KAAK,EAAE,MAJX;AAKIO,MAAAA,KAAK,EAAE,CACH;AACIH,QAAAA,EAAE,EAAE,GADR;AAEIC,QAAAA,KAAK,EAAE,WAFX;AAGIC,QAAAA,IAAI,EAAE,MAHV;AAIIN,QAAAA,KAAK,EAAE,MAJX;AAKIO,QAAAA,KAAK,EAAE;AALX,OADG,EAQH;AACIH,QAAAA,EAAE,EAAE,GADR;AAEIC,QAAAA,KAAK,EAAE,WAFX;AAGIC,QAAAA,IAAI,EAAE,MAHV;AAIIN,QAAAA,KAAK,EAAE,MAJX;AAKIO,QAAAA,KAAK,EAAE;AALX,OARG;AALX,KADG;AALX,GAD8B,EA+B9B;AACIH,IAAAA,EAAE,EAAE,GADR;AAEIC,IAAAA,KAAK,EAAE,OAFX;AAGIC,IAAAA,IAAI,EAAE,QAHV;AAIIN,IAAAA,KAAK,EAAE,MAJX;AAKIO,IAAAA,KAAK,EAAE,CACH;AACIH,MAAAA,EAAE,EAAE,GADR;AAEIC,MAAAA,KAAK,EAAE,SAFX;AAGIC,MAAAA,IAAI,EAAE,MAHV;AAIIN,MAAAA,KAAK,EAAE,MAJX;AAKIO,MAAAA,KAAK,EAAE;AALX,KADG;AALX,GA/B8B,CAAD,CAA/B;AAgDA,MAAIC,GAAJ;;AAEA,QAAMC,MAAM,GAAG,CAACP,IAAD,EAAOF,KAAK,GAAC,EAAb,KAAoB;AACjCU,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACAN,IAAAA,IAAI,CAACU,GAAL,CAAUC,IAAD,IAAU;AACfL,MAAAA,GAAG,GAAG,CAAC,GAAGA,GAAJ,EAASK,IAAI,CAACR,KAAd,CAAN,CADe,CAEf;AACA;AACA;;AACA,UAAGQ,IAAI,CAACN,KAAL,KAAe,EAAlB,EAAqB;AACjBE,QAAAA,MAAM,CAACI,IAAI,CAACN,KAAN,EAAaC,GAAb,CAAN;AACH;AAEJ,KATD,EAFiC,CAYjC;AACA;AACD,GAdD;;AAgBAE,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACP,IAAD,CAAlB;AAEF,sBACE;AAAA;AAAA;AAAA;AAAA,UADF;AAID,CA1ED;;GAAMH,I;;KAAAA,I;AA4EN,eAAeA,IAAf","sourcesContent":["import React, {useState} from 'react'\n\nconst Tree = () => {\n    const [state, setState] = useState(); \n    const [tree,setTree] = useState([\n      {\n          id: '1',\n          title: 'item1', \n          icon: 'folder',\n          state: 'open',\n          items: [\n              {\n                  id: '2',\n                  title: 'item1.1',\n                  icon: 'file',\n                  state: 'open',\n                  items: [\n                      {\n                          id: '2',\n                          title: 'item1.1.1',\n                          icon: 'file',\n                          state: 'open',\n                          items: []\n                      },\n                      {\n                          id: '2',\n                          title: 'item1.1.2',\n                          icon: 'file',\n                          state: 'open',\n                          items: []\n                      }\n                  ]\n              }\n          ]\n      },\n      {\n          id: '3',\n          title: 'item3', \n          icon: 'folder',\n          state: 'open',\n          items: [\n              {\n                  id: '2',\n                  title: 'item3.1',\n                  icon: 'file',\n                  state: 'open',\n                  items: []\n              }\n          ]\n      }\n    ])\n    \n    let arr;\n\n    const render = (tree, state=[]) => {\n      console.log(arr)\n      tree.map((item) => {\n          arr = [...arr, item.title] \n          // console.log(item.title, arr);\n          // addItemToState(item)\n          // setState([...state, item.title])\n          if(item.items !== []){\n              render(item.items, arr);\n          }\n          \n      } )\n      // return state;  \n      // console.log(tree)\n    }\n  \n    console.log(render(tree))\n\n  return (\n    <div>\n    </div>\n  )\n}\n\nexport default Tree\n"]},"metadata":{},"sourceType":"module"}