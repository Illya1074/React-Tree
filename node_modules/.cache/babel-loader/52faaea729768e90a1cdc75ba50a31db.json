{"ast":null,"code":"const R = require('ramda');\n\nconst findNodeById = (tree, id, state = []) => {\n  let arr = state;\n  tree.map((item, i) => {\n    // console.log(item.title);\n    arr.push(...arr, i);\n\n    if (item.id === id) {\n      console.log(item);\n      return arr;\n    }\n\n    arr.push(...arr, 'items');\n\n    if (item.items !== []) {\n      findNodeById(item.items, id, arr);\n    }\n  });\n};\n\nconst fun = () => {\n  const dino = {\n    name: 'Denver',\n    type: 'dinosaur',\n    friends: [{\n      name: 'Wally',\n      type: 'human',\n      pets: [{\n        name: 'Rocky',\n        type: 'dog'\n      }]\n    }, {\n      name: 'Casey',\n      type: 'human'\n    }]\n  }; // dino is in scope\n  // making some lenses\n\n  const friendsLens = R.lensProp('friends');\n  const lens0 = R.lensIndex(0);\n  const petsLens = R.lensProp('pets');\n  const nameLens = R.lensProp('name'); // stacking lenses together into a single lens\n\n  const frns0pets0name = R.compose(friendsLens, // outermost lens first\n  lens0, petsLens, lens0, nameLens // innermost lens last\n  ); // viewing data using a lens\n\n  console.log(R.view(frns0pets0name, dino)); // immutably setting data using a lens\n\n  console.log(R.set(frns0pets0name, 'Spot', dino)); // immutably mapping data using a lens\n\n  console.log(R.over(frns0pets0name, s => s + '!', dino));\n  console.log(dino); // unchanged\n};\n\nconst tree = (state = [{\n  id: Math.floor(Math.random() * 16777215).toString(16),\n  title: 'item1',\n  icon: 'folder',\n  state: true,\n  items: [{\n    id: Math.floor(Math.random() * 16777215).toString(16),\n    title: 'item1.1',\n    icon: 'file',\n    state: true,\n    items: [{\n      id: Math.floor(Math.random() * 16777215).toString(16),\n      title: 'item1.1.1',\n      icon: 'file',\n      state: true,\n      items: []\n    }, {\n      id: Math.floor(Math.random() * 16777215).toString(16),\n      title: 'item1.1.2',\n      icon: 'file',\n      state: true,\n      items: []\n    }, {\n      id: Math.floor(Math.random() * 16777215).toString(16),\n      title: 'item1.1.3',\n      icon: 'file',\n      state: true,\n      items: []\n    }]\n  }, {\n    id: Math.floor(Math.random() * 16777215).toString(16),\n    title: 'item1.2',\n    icon: 'file',\n    state: true,\n    items: [{\n      id: Math.floor(Math.random() * 16777215).toString(16),\n      title: 'item1.2.1',\n      icon: 'file',\n      state: true,\n      items: []\n    }, {\n      id: Math.floor(Math.random() * 16777215).toString(16),\n      title: 'item1.2.2',\n      icon: 'file',\n      state: true,\n      items: []\n    }]\n  }]\n}, {\n  id: Math.floor(Math.random() * 16777215).toString(16),\n  title: 'item2',\n  icon: 'folder',\n  state: true,\n  items: [{\n    id: Math.floor(Math.random() * 16777215).toString(16),\n    title: 'item2.1',\n    icon: 'file',\n    state: true,\n    items: []\n  }]\n}, {\n  id: Math.floor(Math.random() * 16777215).toString(16),\n  title: 'item3',\n  icon: 'folder',\n  state: true,\n  items: [{\n    id: Math.floor(Math.random() * 16777215).toString(16),\n    title: 'item3.1',\n    icon: 'file',\n    state: true,\n    items: []\n  }]\n}, {\n  id: Math.floor(Math.random() * 16777215).toString(16),\n  title: 'item4',\n  icon: 'folder',\n  state: true,\n  items: [{\n    id: Math.floor(Math.random() * 16777215).toString(16),\n    title: 'item4.1',\n    icon: 'file',\n    state: true,\n    items: []\n  }]\n}], action) => {\n  switch (action.type) {\n    case 'OPEN':\n      //    console.log(action)\n      findNodeById(tree, action.id);\n  }\n\n  return state;\n};\n\nexport default tree;","map":{"version":3,"sources":["/home/illia/addnote/front/src/Reducers/tree.js"],"names":["R","require","findNodeById","tree","id","state","arr","map","item","i","push","console","log","items","fun","dino","name","type","friends","pets","friendsLens","lensProp","lens0","lensIndex","petsLens","nameLens","frns0pets0name","compose","view","set","over","s","Math","floor","random","toString","title","icon","action"],"mappings":"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","sourcesContent":["\n\nconst R = require('ramda')\n\nconst findNodeById = (tree, id, state=[]) => {\n    let arr = state\n    tree.map((item,i) => {\n        // console.log(item.title);\n        arr.push(...arr, i);\n\n        if(item.id === id){\n            console.log(item)\n            return arr;\n        }\n\n        arr.push(...arr, 'items');\n\n\n        if(item.items !== []){\n            findNodeById(item.items, id, arr)\n        }\n    })\n}   \n\n  \n\n\nconst fun = () => {\n    \n\n    const dino = {\n        name: 'Denver',\n        type: 'dinosaur',\n        friends: [\n          {\n            name: 'Wally',\n            type: 'human',\n            pets: [\n              {\n                name: 'Rocky',\n                type: 'dog'\n              }\n            ]\n          },\n          {\n            name: 'Casey',\n            type: 'human'\n          }\n        ]\n      }\n    // dino is in scope\n\n    // making some lenses\n    const friendsLens = R.lensProp('friends')\n    const lens0 = R.lensIndex(0)\n    const petsLens = R.lensProp('pets')\n    const nameLens = R.lensProp('name')\n\n    // stacking lenses together into a single lens\n    const frns0pets0name = R.compose(\n    friendsLens,  // outermost lens first\n    lens0,\n    petsLens,\n    lens0,\n    nameLens      // innermost lens last\n    )\n\n    // viewing data using a lens\n    console.log(R.view(frns0pets0name, dino))\n\n    // immutably setting data using a lens\n    console.log(R.set(frns0pets0name, 'Spot', dino))\n\n    // immutably mapping data using a lens\n    console.log(R.over(frns0pets0name, (s => s + '!'), dino))\n\n    console.log(dino) // unchanged\n\n\n}\n\n\nconst tree = (state =  [\n    {\n        id: Math.floor(Math.random()*16777215).toString(16),\n        title: 'item1', \n        icon: 'folder',\n        state: true,\n        items: [\n            {\n                id: Math.floor(Math.random()*16777215).toString(16),\n                title: 'item1.1',\n                icon: 'file',\n                state: true,\n                items: [\n                    {\n                        id: Math.floor(Math.random()*16777215).toString(16),\n                        title: 'item1.1.1',\n                        icon: 'file',\n                        state: true,\n                        items: []\n                    },\n                    {\n                        id: Math.floor(Math.random()*16777215).toString(16),\n                        title: 'item1.1.2',\n                        icon: 'file',\n                        state: true,\n                        items: []\n                    },\n                    {\n                        id: Math.floor(Math.random()*16777215).toString(16),\n                        title: 'item1.1.3',\n                        icon: 'file',\n                        state: true,\n                        items: []\n                    }\n                ]\n            },\n            {\n              id: Math.floor(Math.random()*16777215).toString(16),\n              title: 'item1.2',\n              icon: 'file',\n              state: true,\n              items: [\n                  {\n                      id: Math.floor(Math.random()*16777215).toString(16),\n                      title: 'item1.2.1',\n                      icon: 'file',\n                      state: true,\n                      items: []\n                  },\n                  {\n                      id: Math.floor(Math.random()*16777215).toString(16),\n                      title: 'item1.2.2',\n                      icon: 'file',\n                      state: true,\n                      items: []\n                  }\n              ]\n          }\n        ]\n    },\n    {\n        id: Math.floor(Math.random()*16777215).toString(16),\n        title: 'item2', \n        icon: 'folder',\n        state: true,\n        items: [\n            {\n                id: Math.floor(Math.random()*16777215).toString(16),\n                title: 'item2.1',\n                icon: 'file',\n                state: true,\n                items: []\n            }\n        ]\n    },\n    {\n        id: Math.floor(Math.random()*16777215).toString(16),\n        title: 'item3', \n        icon: 'folder',\n        state: true,\n        items: [\n            {\n                id: Math.floor(Math.random()*16777215).toString(16),\n                title: 'item3.1',\n                icon: 'file',\n                state: true,\n                items: []\n            }\n        ]\n    },\n    {\n        id: Math.floor(Math.random()*16777215).toString(16),\n        title: 'item4', \n        icon: 'folder',\n        state: true,\n        items: [\n            {\n                id: Math.floor(Math.random()*16777215).toString(16),\n                title: 'item4.1',\n                icon: 'file',\n                state: true,\n                items: []\n            }\n        ]\n    }\n], action) => {\n    switch(action.type){\n\n\n        case 'OPEN':\n        //    console.log(action)\n            \n        findNodeById(tree,action.id)\n\n            \n    }\n    return state;   \n}\n\nexport default tree;"]},"metadata":{},"sourceType":"module"}