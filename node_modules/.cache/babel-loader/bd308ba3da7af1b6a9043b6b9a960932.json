{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/illia/addnote/front/src/Containers/Tree/Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './Tree.css';\nimport ContentEditable from 'react-contenteditable';\nimport Circle from '../Circle/Circle';\nimport Draggable from 'react-draggable';\n\nconst TreeItem = ({\n  item,\n  openNode,\n  addNode,\n  deleteNodeFun,\n  editTitle,\n  myLastNode,\n  myDispatch,\n  myNodes,\n  isDragging,\n  isDraggingVal\n}) => {\n  _s();\n\n  const [isDraggingState, setIsDraggingState] = useState(false);\n  const [typing, setTyping] = useState({\n    state: false,\n    timeCode: null,\n    val: item.title\n  }); // useEffect(() => {\n  //     return () => {\n  //         clearTimeout(typing.timeCode)\n  //     }\n  // })\n\n  useEffect(() => {\n    setIsDraggingState(isDraggingVal);\n  }, [isDraggingVal]);\n\n  async function handleChange(evt) {\n    // if(typing.state === true){\n    //     console.log(item.title)\n    //     clearTimeout(typing.timeCode)\n    // }\n    console.log(item.title); // let promise = new Promise((resolve, reject) => {\n\n    const timer = setTimeout(() => {\n      console.log(item.title + ' Finish');\n      setTyping({\n        state: false,\n        timeCode: null,\n        val: evt.target.value\n      });\n      editTitle(item.id, evt.target.value);\n    }, 1500);\n    setTyping({\n      state: true,\n      timeCode: timer,\n      val: evt.target.value\n    }); // });\n    // let result = await promise;\n    // const timer = setTimeout(() => {\n    //     console.log(item.title + ' Finish')\n    //     setTyping({\n    //         state: false,\n    //         timeCode: null,\n    //         val: evt.target.value\n    //     })\n    //     editTitle(item.id, evt.target.value)\n    // }, 1500);\n  }\n\n  ;\n\n  const onDrop = id => {\n    if (isDraggingState) {\n      // console.log(isDraggingState)\n      myLastNode(item.title);\n    }\n  };\n\n  const myDispatchFun = () => {\n    // console.log(myNodes) \n    myDispatch(item.title);\n  };\n\n  const isDraggingFun = val => {\n    isDragging(val); // console.log(val)\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tree_node\",\n    style: {\n      paddingLeft: '20px',\n      cursor: 'pointer',\n      paddingTop: '10px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Circle, {\n      myDispatch: myDispatchFun,\n      isDragging: isDraggingFun\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: isDraggingState ? \"tree_node_item active\" : \"tree_node_item\",\n      style: {\n        zIndex: '100'\n      },\n      onMouseOver: () => onDrop(item.title),\n      children: [/*#__PURE__*/_jsxDEV(ContentEditable, {\n        className: \"tree_node_item_add-button\",\n        html: typing.state ? typing.val : item.title,\n        onClick: myDispatchFun,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"tree_node_item_add-button\",\n        onClick: () => openNode(item.id),\n        children: \"^\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"tree_node_item_add-button\",\n        onClick: () => addNode(item.id),\n        children: \"add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"tree_node_item_add-button\",\n        onClick: () => typing.state ? null : deleteNodeFun(item.id),\n        children: \"del\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"myBar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), item.items && item.state === true ? /*#__PURE__*/_jsxDEV(Tree, {\n      items: item.items,\n      isDragging: isDraggingFun,\n      myNodes: myNodes,\n      myLastNode: myLastNode,\n      myDispatch: myDispatch,\n      editTitle: editTitle,\n      openNode: openNode,\n      addNode: addNode,\n      deleteNodeFun: deleteNodeFun,\n      isDraggingVal: isDraggingVal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 50\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TreeItem, \"EVjSku9H9dzjNI9WVx0IjaZU3os=\");\n\n_c = TreeItem;\n\nconst Tree = ({\n  items,\n  openNode,\n  addNode,\n  deleteNodeFun,\n  editTitle,\n  myLastNode,\n  myDispatch,\n  myNodes,\n  isDragging,\n  isDraggingVal\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: items.map((i, key) => /*#__PURE__*/_jsxDEV(TreeItem, {\n    item: i,\n    myLastNode: myLastNode,\n    openNode: openNode,\n    myDispatch: myDispatch,\n    addNode: addNode,\n    editTitle: editTitle,\n    deleteNodeFun: deleteNodeFun,\n    isDragging: isDragging,\n    isDraggingVal: isDraggingVal,\n    myNodes: myNodes\n  }, key, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 28\n  }, this))\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 114,\n  columnNumber: 132\n}, this);\n\n_c2 = Tree;\nexport default Tree;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TreeItem\");\n$RefreshReg$(_c2, \"Tree\");","map":{"version":3,"sources":["/home/illia/addnote/front/src/Containers/Tree/Tree.js"],"names":["React","useEffect","useState","ContentEditable","Circle","Draggable","TreeItem","item","openNode","addNode","deleteNodeFun","editTitle","myLastNode","myDispatch","myNodes","isDragging","isDraggingVal","isDraggingState","setIsDraggingState","typing","setTyping","state","timeCode","val","title","handleChange","evt","console","log","timer","setTimeout","target","value","id","onDrop","myDispatchFun","isDraggingFun","paddingLeft","cursor","paddingTop","zIndex","items","Tree","map","i","key"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport './Tree.css';\nimport ContentEditable from 'react-contenteditable'\nimport Circle from '../Circle/Circle'\nimport Draggable from 'react-draggable';\n\nconst TreeItem = ({item, openNode, addNode, deleteNodeFun, editTitle, myLastNode, myDispatch, myNodes, isDragging, isDraggingVal}) => {\n    \n    const [isDraggingState,setIsDraggingState] = useState(false)\n    const [typing, setTyping] = useState({\n        state: false,\n        timeCode: null,\n        val: item.title\n    })\n\n\n    // useEffect(() => {\n    //     return () => {\n    //         clearTimeout(typing.timeCode)\n    //     }\n    // })\n    \n    useEffect(() => {\n        setIsDraggingState(isDraggingVal)\n    }, [isDraggingVal])\n\n    async function handleChange(evt) {\n\n        // if(typing.state === true){\n        //     console.log(item.title)\n        //     clearTimeout(typing.timeCode)\n        // }\n        console.log(item.title)\n        // let promise = new Promise((resolve, reject) => {\n            const timer = setTimeout(() => {\n                console.log(item.title + ' Finish')\n                setTyping({\n                    state: false,\n                    timeCode: null,\n                    val: evt.target.value\n                })\n                editTitle(item.id, evt.target.value)\n            }, 1500)\n            \n            setTyping({\n                state: true,\n                timeCode: timer,\n                val: evt.target.value\n            })\n        // });\n\n        // let result = await promise;\n\n        // const timer = setTimeout(() => {\n        //     console.log(item.title + ' Finish')\n        //     setTyping({\n        //         state: false,\n        //         timeCode: null,\n        //         val: evt.target.value\n        //     })\n        //     editTitle(item.id, evt.target.value)\n        // }, 1500);\n\n    \n\n    };\n    \n    \n    const onDrop = (id) => {\n        if(isDraggingState){\n            // console.log(isDraggingState)\n\n            myLastNode(item.title)\n        }\n    }\n    \n\n\n    const myDispatchFun = () => {\n        // console.log(myNodes) \n        myDispatch(item.title)\n    }\n\n\n    const isDraggingFun = (val) => {\n        isDragging(val)\n        // console.log(val)\n    }\n\n    \n\n    return (\n        <div className=\"tree_node\" style={{paddingLeft: '20px', cursor: 'pointer', paddingTop: '10px'}}>\n            <Circle myDispatch={myDispatchFun} isDragging={isDraggingFun}/>\n            \n            <div className={isDraggingState ? \"tree_node_item active\" : \"tree_node_item\"} style={{zIndex:'100'}}  onMouseOver={() => onDrop(item.title)}>\n            \n                <ContentEditable className='tree_node_item_add-button' html={typing.state ? typing.val : item.title}\n                 onClick={myDispatchFun} onChange={handleChange} />\n                <h5 className='tree_node_item_add-button'  onClick={() => openNode(item.id)}>^</h5>\n                <h5 className='tree_node_item_add-button'  onClick={() => addNode(item.id)}>add</h5>\n                <h5 className='tree_node_item_add-button'  onClick={() => typing.state ? null : deleteNodeFun(item.id)}>del</h5>\n                \n            </div>\n            <div className='myBar'></div>\n            {item.items && item.state === true ? <Tree items={item.items} isDragging={isDraggingFun} myNodes={myNodes} myLastNode={myLastNode}  myDispatch={myDispatch}\n             editTitle={editTitle} openNode={openNode} addNode={addNode} deleteNodeFun={deleteNodeFun} isDraggingVal={isDraggingVal}/> : null}\n        </div>\n    )\n} \n        \n\n\nconst Tree = ({items, openNode, addNode, deleteNodeFun, editTitle, myLastNode, myDispatch, myNodes, isDragging, isDraggingVal}) => <div>\n    {items.map((i, key) => <TreeItem  key={key} item={i} myLastNode={myLastNode} openNode={openNode}\n     myDispatch={myDispatch} addNode={addNode} editTitle={editTitle} deleteNodeFun={deleteNodeFun} isDragging={isDragging}\n      isDraggingVal={isDraggingVal} myNodes={myNodes}/>)}    \n</div>\n\n\nexport default Tree;"]},"metadata":{},"sourceType":"module"}