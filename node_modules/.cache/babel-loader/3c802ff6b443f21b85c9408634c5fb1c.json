{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/illia/addnote/front/src/Containers/Tree/Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './Tree.css';\nimport ContentEditable from 'react-contenteditable';\nimport Circle from '../Circle/Circle';\nimport Draggable from 'react-draggable';\n\nconst TreeItem = ({\n  item,\n  openNode,\n  addNode,\n  deleteNodeFun,\n  editTitle,\n  myLastNode,\n  myDispatch,\n  myNodes\n}) => {\n  _s();\n\n  const [isDraggingState, setIsDraggingState] = useState(false);\n  const [typing, setTyping] = useState({\n    state: false,\n    timeCode: null,\n    val: item.title\n  });\n  useEffect(() => {\n    return () => {\n      clearTimeout(typing.timeCode);\n    };\n  });\n\n  function handleChange(evt) {\n    if (typing.state === true) {\n      clearTimeout(typing.timeCode);\n    }\n\n    const timer = setTimeout(() => {\n      setTyping({\n        state: false,\n        timeCode: null,\n        val: evt.target.value\n      });\n      editTitle(item.id, evt.target.value);\n    }, 2000);\n    setTyping({\n      state: true,\n      timeCode: timer,\n      val: evt.target.value\n    });\n  }\n\n  ;\n\n  const onDrop = id => {\n    myLastNode(id); // console.log(id)\n  };\n\n  const myDispatchFun = () => {\n    // console.log('dispatch') \n    myDispatch();\n  };\n\n  const isDraggingFun = val => {\n    setIsDraggingState(val);\n    console.log(val);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tree_node\",\n    style: {\n      paddingLeft: '20px',\n      cursor: 'pointer',\n      paddingTop: '10px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Circle, {\n      myDispatch: myDispatchFun,\n      isDragging: isDraggingFun\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tree_node_item active\",\n      style: {\n        zIndex: '100'\n      },\n      onMouseOver: () => onDrop(item.title),\n      children: [/*#__PURE__*/_jsxDEV(ContentEditable, {\n        className: \"tree_node_item_add-button\",\n        html: typing.state ? typing.val : item.title,\n        onClick: myDispatchFun,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"tree_node_item_add-button\",\n        onClick: () => openNode(item.id),\n        children: \"^\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"tree_node_item_add-button\",\n        onClick: () => addNode(item.id),\n        children: \"add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"tree_node_item_add-button\",\n        onClick: () => typing.state ? null : deleteNodeFun(item.id),\n        children: \"del\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"myBar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), item.items && item.state === true ? /*#__PURE__*/_jsxDEV(Tree, {\n      items: item.items,\n      myNodes: myNodes,\n      myLastNode: myLastNode,\n      myDispatch: myDispatch,\n      editTitle: editTitle,\n      openNode: openNode,\n      addNode: addNode,\n      deleteNodeFun: deleteNodeFun\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 50\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TreeItem, \"EVjSku9H9dzjNI9WVx0IjaZU3os=\");\n\n_c = TreeItem;\n\nconst Tree = ({\n  items,\n  openNode,\n  addNode,\n  deleteNodeFun,\n  editTitle,\n  myLastNode,\n  myDispatch,\n  myNodes\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: items.map((i, key) => /*#__PURE__*/_jsxDEV(TreeItem, {\n    item: i,\n    myLastNode: myLastNode,\n    openNode: openNode,\n    myDispatch: myDispatch,\n    addNode: addNode,\n    editTitle: editTitle,\n    deleteNodeFun: deleteNodeFun,\n    myNodes: myNodes\n  }, key, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 28\n  }, this))\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 89,\n  columnNumber: 105\n}, this);\n\n_c2 = Tree;\nexport default Tree;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TreeItem\");\n$RefreshReg$(_c2, \"Tree\");","map":{"version":3,"sources":["/home/illia/addnote/front/src/Containers/Tree/Tree.js"],"names":["React","useEffect","useState","ContentEditable","Circle","Draggable","TreeItem","item","openNode","addNode","deleteNodeFun","editTitle","myLastNode","myDispatch","myNodes","isDraggingState","setIsDraggingState","typing","setTyping","state","timeCode","val","title","clearTimeout","handleChange","evt","timer","setTimeout","target","value","id","onDrop","myDispatchFun","isDraggingFun","console","log","paddingLeft","cursor","paddingTop","zIndex","items","Tree","map","i","key"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAO,YAAP;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA,QAAP;AAAiBC,EAAAA,OAAjB;AAA0BC,EAAAA,aAA1B;AAAyCC,EAAAA,SAAzC;AAAoDC,EAAAA,UAApD;AAAgEC,EAAAA,UAAhE;AAA4EC,EAAAA;AAA5E,CAAD,KAA0F;AAAA;;AAEvG,QAAM,CAACC,eAAD,EAAiBC,kBAAjB,IAAuCd,QAAQ,CAAC,KAAD,CAArD;AACA,QAAM,CAACe,MAAD,EAASC,SAAT,IAAsBhB,QAAQ,CAAC;AACjCiB,IAAAA,KAAK,EAAE,KAD0B;AAEjCC,IAAAA,QAAQ,EAAE,IAFuB;AAGjCC,IAAAA,GAAG,EAAEd,IAAI,CAACe;AAHuB,GAAD,CAApC;AAOArB,EAAAA,SAAS,CAAC,MAAM;AACZ,WAAO,MAAM;AACTsB,MAAAA,YAAY,CAACN,MAAM,CAACG,QAAR,CAAZ;AACH,KAFD;AAGH,GAJQ,CAAT;;AAMA,WAASI,YAAT,CAAsBC,GAAtB,EAA2B;AAEvB,QAAGR,MAAM,CAACE,KAAP,KAAiB,IAApB,EAAyB;AACrBI,MAAAA,YAAY,CAACN,MAAM,CAACG,QAAR,CAAZ;AACH;;AAED,UAAMM,KAAK,GAAGC,UAAU,CAAC,MAAM;AAC3BT,MAAAA,SAAS,CAAC;AACNC,QAAAA,KAAK,EAAE,KADD;AAENC,QAAAA,QAAQ,EAAE,IAFJ;AAGNC,QAAAA,GAAG,EAAEI,GAAG,CAACG,MAAJ,CAAWC;AAHV,OAAD,CAAT;AAKAlB,MAAAA,SAAS,CAACJ,IAAI,CAACuB,EAAN,EAAUL,GAAG,CAACG,MAAJ,CAAWC,KAArB,CAAT;AACH,KAPuB,EAOrB,IAPqB,CAAxB;AASAX,IAAAA,SAAS,CAAC;AACNC,MAAAA,KAAK,EAAE,IADD;AAENC,MAAAA,QAAQ,EAAEM,KAFJ;AAGNL,MAAAA,GAAG,EAAEI,GAAG,CAACG,MAAJ,CAAWC;AAHV,KAAD,CAAT;AAMH;;AAAA;;AAGD,QAAME,MAAM,GAAID,EAAD,IAAQ;AACnBlB,IAAAA,UAAU,CAACkB,EAAD,CAAV,CADmB,CAEnB;AACH,GAHD;;AAOA,QAAME,aAAa,GAAG,MAAM;AACxB;AACAnB,IAAAA,UAAU;AACb,GAHD;;AAMA,QAAMoB,aAAa,GAAIZ,GAAD,IAAS;AAC3BL,IAAAA,kBAAkB,CAACK,GAAD,CAAlB;AACAa,IAAAA,OAAO,CAACC,GAAR,CAAYd,GAAZ;AACH,GAHD;;AAOA,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAA2B,IAAA,KAAK,EAAE;AAACe,MAAAA,WAAW,EAAE,MAAd;AAAsBC,MAAAA,MAAM,EAAE,SAA9B;AAAyCC,MAAAA,UAAU,EAAE;AAArD,KAAlC;AAAA,4BACI,QAAC,MAAD;AAAQ,MAAA,UAAU,EAAEN,aAApB;AAAmC,MAAA,UAAU,EAAEC;AAA/C;AAAA;AAAA;AAAA;AAAA,YADJ,eAGI;AAAM,MAAA,SAAS,EAAC,uBAAhB;AAAwC,MAAA,KAAK,EAAE;AAACM,QAAAA,MAAM,EAAC;AAAR,OAA/C;AAAgE,MAAA,WAAW,EAAE,MAAMR,MAAM,CAACxB,IAAI,CAACe,KAAN,CAAzF;AAAA,8BAEI,QAAC,eAAD;AAAiB,QAAA,SAAS,EAAC,2BAA3B;AAAuD,QAAA,IAAI,EAAEL,MAAM,CAACE,KAAP,GAAeF,MAAM,CAACI,GAAtB,GAA4Bd,IAAI,CAACe,KAA9F;AACC,QAAA,OAAO,EAAEU,aADV;AACyB,QAAA,QAAQ,EAAER;AADnC;AAAA;AAAA;AAAA;AAAA,cAFJ,eAII;AAAI,QAAA,SAAS,EAAC,2BAAd;AAA2C,QAAA,OAAO,EAAE,MAAMhB,QAAQ,CAACD,IAAI,CAACuB,EAAN,CAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI;AAAI,QAAA,SAAS,EAAC,2BAAd;AAA2C,QAAA,OAAO,EAAE,MAAMrB,OAAO,CAACF,IAAI,CAACuB,EAAN,CAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,eAMI;AAAI,QAAA,SAAS,EAAC,2BAAd;AAA2C,QAAA,OAAO,EAAE,MAAMb,MAAM,CAACE,KAAP,GAAe,IAAf,GAAsBT,aAAa,CAACH,IAAI,CAACuB,EAAN,CAA7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAYI;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YAZJ,EAaKvB,IAAI,CAACiC,KAAL,IAAcjC,IAAI,CAACY,KAAL,KAAe,IAA7B,gBAAoC,QAAC,IAAD;AAAM,MAAA,KAAK,EAAEZ,IAAI,CAACiC,KAAlB;AAAyB,MAAA,OAAO,EAAE1B,OAAlC;AAA2C,MAAA,UAAU,EAAEF,UAAvD;AAAoE,MAAA,UAAU,EAAEC,UAAhF;AACpC,MAAA,SAAS,EAAEF,SADyB;AACd,MAAA,QAAQ,EAAEH,QADI;AACM,MAAA,OAAO,EAAEC,OADf;AACwB,MAAA,aAAa,EAAEC;AADvC;AAAA;AAAA;AAAA;AAAA,YAApC,GAC8F,IAdnG;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAkBH,CA9ED;;GAAMJ,Q;;KAAAA,Q;;AAkFN,MAAMmC,IAAI,GAAG,CAAC;AAACD,EAAAA,KAAD;AAAQhC,EAAAA,QAAR;AAAkBC,EAAAA,OAAlB;AAA2BC,EAAAA,aAA3B;AAA0CC,EAAAA,SAA1C;AAAqDC,EAAAA,UAArD;AAAiEC,EAAAA,UAAjE;AAA6EC,EAAAA;AAA7E,CAAD,kBAA2F;AAAA,YACnG0B,KAAK,CAACE,GAAN,CAAU,CAACC,CAAD,EAAIC,GAAJ,kBAAY,QAAC,QAAD;AAAqB,IAAA,IAAI,EAAED,CAA3B;AAA8B,IAAA,UAAU,EAAE/B,UAA1C;AAAsD,IAAA,QAAQ,EAAEJ,QAAhE;AACtB,IAAA,UAAU,EAAEK,UADU;AACE,IAAA,OAAO,EAAEJ,OADX;AACoB,IAAA,SAAS,EAAEE,SAD/B;AAC0C,IAAA,aAAa,EAAED,aADzD;AACwE,IAAA,OAAO,EAAEI;AADjF,KAAgB8B,GAAhB;AAAA;AAAA;AAAA;AAAA,UAAtB;AADmG;AAAA;AAAA;AAAA;AAAA,QAAxG;;MAAMH,I;AAMN,eAAeA,IAAf","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport './Tree.css';\nimport ContentEditable from 'react-contenteditable'\nimport Circle from '../Circle/Circle'\nimport Draggable from 'react-draggable';\n\nconst TreeItem = ({item, openNode, addNode, deleteNodeFun, editTitle, myLastNode, myDispatch, myNodes}) => {\n    \n    const [isDraggingState,setIsDraggingState] = useState(false)\n    const [typing, setTyping] = useState({\n        state: false,\n        timeCode: null,\n        val: item.title\n    })\n\n\n    useEffect(() => {\n        return () => {\n            clearTimeout(typing.timeCode)\n        }\n    })\n    \n    function handleChange(evt) {\n\n        if(typing.state === true){\n            clearTimeout(typing.timeCode)\n        }\n        \n        const timer = setTimeout(() => {\n            setTyping({\n                state: false,\n                timeCode: null,\n                val: evt.target.value\n            })\n            editTitle(item.id, evt.target.value)\n        }, 2000);\n\n        setTyping({\n            state: true,\n            timeCode: timer,\n            val: evt.target.value\n        })\n\n    };\n    \n    \n    const onDrop = (id) => {\n        myLastNode(id)\n        // console.log(id)\n    }\n    \n\n\n    const myDispatchFun = () => {\n        // console.log('dispatch') \n        myDispatch()\n    }\n\n\n    const isDraggingFun = (val) => {\n        setIsDraggingState(val)\n        console.log(val)\n    }\n\n    \n\n    return (\n        <div className=\"tree_node\" style={{paddingLeft: '20px', cursor: 'pointer', paddingTop: '10px'}}>\n            <Circle myDispatch={myDispatchFun} isDragging={isDraggingFun}/>\n            \n            <div  className=\"tree_node_item active\" style={{zIndex:'100'}}  onMouseOver={() => onDrop(item.title)}>\n            \n                <ContentEditable className='tree_node_item_add-button' html={typing.state ? typing.val : item.title}\n                 onClick={myDispatchFun} onChange={handleChange} />\n                <h5 className='tree_node_item_add-button'  onClick={() => openNode(item.id)}>^</h5>\n                <h5 className='tree_node_item_add-button'  onClick={() => addNode(item.id)}>add</h5>\n                <h5 className='tree_node_item_add-button'  onClick={() => typing.state ? null : deleteNodeFun(item.id)}>del</h5>\n                \n            </div>\n            <div className='myBar'></div>\n            {item.items && item.state === true ? <Tree items={item.items} myNodes={myNodes} myLastNode={myLastNode}  myDispatch={myDispatch}\n             editTitle={editTitle} openNode={openNode} addNode={addNode} deleteNodeFun={deleteNodeFun}/> : null}\n        </div>\n    )\n} \n        \n\n\nconst Tree = ({items, openNode, addNode, deleteNodeFun, editTitle, myLastNode, myDispatch, myNodes}) => <div>\n    {items.map((i, key) => <TreeItem  key={key} item={i} myLastNode={myLastNode} openNode={openNode}\n     myDispatch={myDispatch} addNode={addNode} editTitle={editTitle} deleteNodeFun={deleteNodeFun} myNodes={myNodes}/>)}    \n</div>\n\n\nexport default Tree;"]},"metadata":{},"sourceType":"module"}