{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/illia/addnote/front/src/Layout.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Tree from './Containers/Tree/Tree';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { openAndCloseNode, addNode, deleteNode, editTitle } from './Actions/index';\n\nconst Layout = () => {\n  _s();\n\n  const tree = useSelector(state => state.tree);\n  const dispatch = useDispatch();\n  const [lastNodem, setLastNode] = useState(null);\n\n  const openAndCloseNodeFun = id => {\n    dispatch(openAndCloseNode(id)); // console.log(id)\n  };\n\n  const addNodeFun = id => {\n    dispatch(addNode(id));\n  };\n\n  const deleteNodeFun = id => {\n    dispatch(deleteNode(id));\n  };\n\n  const editTitleFun = (id, val) => {\n    dispatch(editTitle(id, val));\n  };\n\n  const myLastNode = val => {\n    setLastNode(val);\n    console.log(val);\n  };\n\n  const myDispatch = () => {\n    console.log(lastNodem);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      onClick: () => myDispatch(),\n      children: \"Nothing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tree\",\n      children: /*#__PURE__*/_jsxDEV(Tree, {\n        openNode: openAndCloseNodeFun,\n        myDispatch: () => myDispatch(),\n        myLastNode: myLastNode,\n        addNode: addNodeFun,\n        items: tree,\n        deleteNodeFun: deleteNodeFun,\n        editTitle: editTitleFun,\n        myNodes: lastNodem\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Layout, \"We+hH41sD7f7N9xJCJSgVrLKPws=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Layout;\nexport default Layout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Layout\");","map":{"version":3,"sources":["/home/illia/addnote/front/src/Layout.js"],"names":["React","useState","Tree","useSelector","useDispatch","openAndCloseNode","addNode","deleteNode","editTitle","Layout","tree","state","dispatch","lastNodem","setLastNode","openAndCloseNodeFun","id","addNodeFun","deleteNodeFun","editTitleFun","val","myLastNode","console","log","myDispatch"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,SAAQC,gBAAR,EAA0BC,OAA1B,EAAmCC,UAAnC,EAA+CC,SAA/C,QAA+D,iBAA/D;;AAGA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACjB,QAAMC,IAAI,GAAGP,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACD,IAAhB,CAAxB;AACA,QAAME,QAAQ,GAAGR,WAAW,EAA5B;AACA,QAAM,CAACS,SAAD,EAAYC,WAAZ,IAA2Bb,QAAQ,CAAC,IAAD,CAAzC;;AACA,QAAMc,mBAAmB,GAAIC,EAAD,IAAQ;AAChCJ,IAAAA,QAAQ,CAACP,gBAAgB,CAACW,EAAD,CAAjB,CAAR,CADgC,CAEhC;AACH,GAHD;;AAKA,QAAMC,UAAU,GAAID,EAAD,IAAQ;AACvBJ,IAAAA,QAAQ,CAACN,OAAO,CAACU,EAAD,CAAR,CAAR;AACH,GAFD;;AAIA,QAAME,aAAa,GAAIF,EAAD,IAAQ;AAC1BJ,IAAAA,QAAQ,CAACL,UAAU,CAACS,EAAD,CAAX,CAAR;AACH,GAFD;;AAIA,QAAMG,YAAY,GAAG,CAACH,EAAD,EAAKI,GAAL,KAAa;AAC9BR,IAAAA,QAAQ,CAACJ,SAAS,CAACQ,EAAD,EAAKI,GAAL,CAAV,CAAR;AACH,GAFD;;AAIA,QAAMC,UAAU,GAAID,GAAD,IAAS;AACxBN,IAAAA,WAAW,CAACM,GAAD,CAAX;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACH,GAHD;;AAKA,QAAMI,UAAU,GAAG,MAAM;AACrBF,IAAAA,OAAO,CAACC,GAAR,CAAYV,SAAZ;AAEH,GAHD;;AAOA,sBAEI;AAAA,4BAEI;AAAI,MAAA,OAAO,EAAE,MAAMW,UAAU,EAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,6BACI,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAET,mBAAhB;AAAqC,QAAA,UAAU,EAAE,MAAMS,UAAU,EAAjE;AAAqE,QAAA,UAAU,EAAEH,UAAjF;AAA6F,QAAA,OAAO,EAAEJ,UAAtG;AACC,QAAA,KAAK,EAAEP,IADR;AACc,QAAA,aAAa,EAAEQ,aAD7B;AAC4C,QAAA,SAAS,EAAEC,YADvD;AACqE,QAAA,OAAO,EAAEN;AAD9E;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA,kBAFJ;AAWH,CA5CD;;GAAMJ,M;UACWN,W,EACIC,W;;;KAFfK,M;AA8CN,eAAeA,MAAf","sourcesContent":["import React, {useState} from 'react'\nimport Tree from './Containers/Tree/Tree'\nimport {useSelector, useDispatch} from \"react-redux\"\nimport {openAndCloseNode, addNode, deleteNode, editTitle} from './Actions/index' \n\n\nconst Layout = () => {\n    const tree = useSelector(state => state.tree)\n    const dispatch = useDispatch();\n    const [lastNodem, setLastNode] = useState(null)\n    const openAndCloseNodeFun = (id) => {\n        dispatch(openAndCloseNode(id));\n        // console.log(id)\n    }\n\n    const addNodeFun = (id) => {\n        dispatch(addNode(id));\n    }\n\n    const deleteNodeFun = (id) => {\n        dispatch(deleteNode(id))\n    }\n\n    const editTitleFun = (id, val) => {\n        dispatch(editTitle(id, val))\n    }\n\n    const myLastNode = (val) => {\n        setLastNode(val)\n        console.log(val)\n    }\n\n    const myDispatch = () => {\n        console.log(lastNodem)\n        \n    }\n\n    \n\n    return (\n        \n        <>\n            {/* <ContentEditable html={'Okey'} onBlur={handleBlur} onChange={(evt)=>} /> */}\n            <h1 onClick={() => myDispatch()}>Nothing</h1>\n            <div className='tree'>\n                <Tree openNode={openAndCloseNodeFun} myDispatch={() => myDispatch()} myLastNode={myLastNode} addNode={addNodeFun}\n                 items={tree} deleteNodeFun={deleteNodeFun} editTitle={editTitleFun} myNodes={lastNodem}/>\n            </div>\n        </>\n    )\n}\n\nexport default Layout\n"]},"metadata":{},"sourceType":"module"}