{"ast":null,"code":"const R = require('ramda'); /////////////////////////////////// that function return a path wraped in array to primitive of object which was passed\n\n\nconst findPath = (primitive, object, path = []) => {\n  for (const [key, value] of Object.entries(object)) {\n    if (value === primitive) {\n      return [...path, key];\n    }\n\n    if (typeof value === 'object' || typeof value === 'function') {\n      const newPath = findPath(primitive, value, [...path, key]);\n\n      if (newPath) {\n        return newPath;\n      }\n    }\n  }\n\n  return null;\n};\n\nconst composeLense = updatedPath => {\n  return R.compose(...updatedPath.map(item => isNaN(item) ? R.lensProp(item) : R.lensIndex(parseInt(item))));\n}; ///////////////////////////////////// that function return updated state of tree\n\n\nconst openAndClose = (id, state) => {\n  const updatedPath = [...findPath(id, state).slice(0, findPath(od, state).length - 1), 'state'];\n  const boolState = !R.view(composeLense(updatedPath), state);\n  const newState = R.set(composeLense, boolState, state);\n  return newState;\n}; ////////////////////////////////////\n\n\nconst addNode = (id, state) => {\n  // const updatedPath = [...findPath(prim,obj).slice(0, findPath(prim,obj).length-1), 'items'];\n  console.log(findPath(id, state));\n};\n\nconst tree = (state = [{\n  id: Math.floor(Math.random() * 16777215).toString(16),\n  title: 'item1',\n  icon: 'folder',\n  state: true,\n  items: [{\n    id: Math.floor(Math.random() * 16777215).toString(16),\n    title: 'item1.1',\n    icon: 'file',\n    state: true,\n    items: [{\n      id: Math.floor(Math.random() * 16777215).toString(16),\n      title: 'item1.1.1',\n      icon: 'file',\n      state: true,\n      items: []\n    }, {\n      id: Math.floor(Math.random() * 16777215).toString(16),\n      title: 'item1.1.2',\n      icon: 'file',\n      state: true,\n      items: []\n    }, {\n      id: Math.floor(Math.random() * 16777215).toString(16),\n      title: 'item1.1.3',\n      icon: 'file',\n      state: true,\n      items: []\n    }]\n  }, {\n    id: Math.floor(Math.random() * 16777215).toString(16),\n    title: 'item1.2',\n    icon: 'file',\n    state: true,\n    items: [{\n      id: Math.floor(Math.random() * 16777215).toString(16),\n      title: 'item1.2.1',\n      icon: 'file',\n      state: true,\n      items: []\n    }, {\n      id: Math.floor(Math.random() * 16777215).toString(16),\n      title: 'item1.2.2',\n      icon: 'file',\n      state: true,\n      items: []\n    }]\n  }]\n}, {\n  id: Math.floor(Math.random() * 16777215).toString(16),\n  title: 'item2',\n  icon: 'folder',\n  state: true,\n  items: [{\n    id: Math.floor(Math.random() * 16777215).toString(16),\n    title: 'item2.1',\n    icon: 'file',\n    state: true,\n    items: []\n  }]\n}, {\n  id: Math.floor(Math.random() * 16777215).toString(16),\n  title: 'item3',\n  icon: 'folder',\n  state: true,\n  items: [{\n    id: Math.floor(Math.random() * 16777215).toString(16),\n    title: 'item3.1',\n    icon: 'file',\n    state: true,\n    items: []\n  }]\n}, {\n  id: Math.floor(Math.random() * 16777215).toString(16),\n  title: 'item4',\n  icon: 'folder',\n  state: true,\n  items: [{\n    id: Math.floor(Math.random() * 16777215).toString(16),\n    title: 'item4.1',\n    icon: 'file',\n    state: true,\n    items: []\n  }]\n}], action) => {\n  switch (action.type) {\n    case 'OPEN':\n      return openAndClose(action.id, state);\n\n    case 'ADD_NODE':\n      addNode(action.id, state);\n  }\n\n  return state;\n};\n\nexport default tree;","map":{"version":3,"sources":["/home/illia/addnote/front/src/Reducers/tree.js"],"names":["R","require","findPath","primitive","object","path","key","value","Object","entries","newPath","composeLense","updatedPath","compose","map","item","isNaN","lensProp","lensIndex","parseInt","openAndClose","id","state","slice","od","length","boolState","view","newState","set","addNode","console","log","tree","Math","floor","random","toString","title","icon","items","action","type"],"mappings":"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","sourcesContent":["\n\nconst R = require('ramda')\n\n\n\n\n/////////////////////////////////// that function return a path wraped in array to primitive of object which was passed\n\nconst findPath = (primitive, object, path = []) => {\n    for (const [key, value] of Object.entries(object)) {\n      if (value === primitive) {\n        return [...path, key];\n      }\n      \n      if (typeof value === 'object' || typeof value === 'function') {\n        const newPath = findPath(primitive, value, [...path, key]);\n        if (newPath) {\n          return newPath;\n        }\n      }\n    }\n    return null;\n  }\n\nconst composeLense = (updatedPath) => {\n    return R.compose(...updatedPath.map(item => isNaN(item) ? R.lensProp(item) : R.lensIndex(parseInt(item))));\n}\n\n///////////////////////////////////// that function return updated state of tree\n\nconst openAndClose = (id, state) => {\n    \n    const updatedPath = [...findPath(id,state).slice(0, findPath(od,state).length-1), 'state']\n    const boolState = !R.view(composeLense(updatedPath), state);\n    const newState = R.set(composeLense, boolState, state);\n    \n    return newState;\n}\n\n////////////////////////////////////\n\nconst addNode = (id, state) => {\n    // const updatedPath = [...findPath(prim,obj).slice(0, findPath(prim,obj).length-1), 'items'];\n    console.log(findPath(id, state))\n}\n\nconst tree = (state =  [\n    {\n        id: Math.floor(Math.random()*16777215).toString(16),\n        title: 'item1', \n        icon: 'folder',\n        state: true,\n        items: [\n            {\n                id: Math.floor(Math.random()*16777215).toString(16),\n                title: 'item1.1',\n                icon: 'file',\n                state: true,\n                items: [\n                    {\n                        id: Math.floor(Math.random()*16777215).toString(16),\n                        title: 'item1.1.1',\n                        icon: 'file',\n                        state: true,\n                        items: []\n                    },\n                    {\n                        id: Math.floor(Math.random()*16777215).toString(16),\n                        title: 'item1.1.2',\n                        icon: 'file',\n                        state: true,\n                        items: []\n                    },\n                    {\n                        id: Math.floor(Math.random()*16777215).toString(16),\n                        title: 'item1.1.3',\n                        icon: 'file',\n                        state: true,\n                        items: []\n                    }\n                ]\n            },\n            {\n              id: Math.floor(Math.random()*16777215).toString(16),\n              title: 'item1.2',\n              icon: 'file',\n              state: true,\n              items: [\n                  {\n                      id: Math.floor(Math.random()*16777215).toString(16),\n                      title: 'item1.2.1',\n                      icon: 'file',\n                      state: true,\n                      items: []\n                  },\n                  {\n                      id: Math.floor(Math.random()*16777215).toString(16),\n                      title: 'item1.2.2',\n                      icon: 'file',\n                      state: true,\n                      items: []\n                  }\n              ]\n          }\n        ]\n    },\n    {\n        id: Math.floor(Math.random()*16777215).toString(16),\n        title: 'item2', \n        icon: 'folder',\n        state: true,\n        items: [\n            {\n                id: Math.floor(Math.random()*16777215).toString(16),\n                title: 'item2.1',\n                icon: 'file',\n                state: true,\n                items: []\n            }\n        ]\n    },\n    {\n        id: Math.floor(Math.random()*16777215).toString(16),\n        title: 'item3', \n        icon: 'folder',\n        state: true,\n        items: [\n            {\n                id: Math.floor(Math.random()*16777215).toString(16),\n                title: 'item3.1',\n                icon: 'file',\n                state: true,\n                items: []\n            }\n        ]\n    },\n    {\n        id: Math.floor(Math.random()*16777215).toString(16),\n        title: 'item4', \n        icon: 'folder',\n        state: true,\n        items: [\n            {\n                id: Math.floor(Math.random()*16777215).toString(16),\n                title: 'item4.1',\n                icon: 'file',\n                state: true,\n                items: []\n            }\n        ]\n    }\n], action) => {\n    switch(action.type){\n        case 'OPEN':\n            return openAndClose(action.id, state);\n        case 'ADD_NODE':\n            addNode(action.id, state);\n    }\n    return state;   \n}\n\nexport default tree;"]},"metadata":{},"sourceType":"module"}