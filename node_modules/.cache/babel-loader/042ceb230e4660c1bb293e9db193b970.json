{"ast":null,"code":"const R = require('ramda');\n\nfunction findPath(primitive, object, path = []) {\n  for (const [key, value] of Object.entries(object)) {\n    if (value === primitive) {\n      return [...path, key];\n    }\n\n    if (typeof value === 'object' || typeof value === 'function') {\n      const newPath = findPath(primitive, value, [...path, key]);\n\n      if (newPath) {\n        return newPath;\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction getPathProps(prim, obj) {\n  const arr = findPath(prim, obj).slice(0, findPath(prim, obj).length - 1);\n  console.log(arr);\n  return R.compose(...arr.map(item => R.lensProp(item)));\n}\n\nconst fun = () => {\n  const dino = {\n    name: 'Denver',\n    type: 'dinosaur',\n    friends: [{\n      name: 'Wally',\n      type: 'human',\n      pets: [{\n        name: 'Rocky',\n        type: 'dog'\n      }]\n    }, {\n      name: 'Casey',\n      type: 'human'\n    }]\n  }; // dino is in scope\n  // making some lenses\n\n  const friendsLens = R.lensProp('friends');\n  const lens0 = R.lensIndex(0);\n  const petsLens = R.lensProp('pets');\n  const nameLens = R.lensProp('name'); // stacking lenses together into a single lens\n\n  const frns0pets0name = R.compose(friendsLens, // outermost lens first\n  lens0, petsLens, lens0, nameLens // innermost lens last\n  ); // viewing data using a lens\n\n  console.log(R.view(frns0pets0name, dino)); // immutably setting data using a lens\n\n  console.log(R.set(frns0pets0name, 'Spot', dino)); // immutably mapping data using a lens\n\n  console.log(R.over(frns0pets0name, s => s + '!', dino));\n  console.log(dino); // unchanged\n};\n\nconst tree = (state = [{\n  id: Math.floor(Math.random() * 16777215).toString(16),\n  title: 'item1',\n  icon: 'folder',\n  state: true,\n  items: [{\n    id: Math.floor(Math.random() * 16777215).toString(16),\n    title: 'item1.1',\n    icon: 'file',\n    state: true,\n    items: [{\n      id: Math.floor(Math.random() * 16777215).toString(16),\n      title: 'item1.1.1',\n      icon: 'file',\n      state: true,\n      items: []\n    }, {\n      id: Math.floor(Math.random() * 16777215).toString(16),\n      title: 'item1.1.2',\n      icon: 'file',\n      state: true,\n      items: []\n    }, {\n      id: Math.floor(Math.random() * 16777215).toString(16),\n      title: 'item1.1.3',\n      icon: 'file',\n      state: true,\n      items: []\n    }]\n  }, {\n    id: Math.floor(Math.random() * 16777215).toString(16),\n    title: 'item1.2',\n    icon: 'file',\n    state: true,\n    items: [{\n      id: Math.floor(Math.random() * 16777215).toString(16),\n      title: 'item1.2.1',\n      icon: 'file',\n      state: true,\n      items: []\n    }, {\n      id: Math.floor(Math.random() * 16777215).toString(16),\n      title: 'item1.2.2',\n      icon: 'file',\n      state: true,\n      items: []\n    }]\n  }]\n}, {\n  id: Math.floor(Math.random() * 16777215).toString(16),\n  title: 'item2',\n  icon: 'folder',\n  state: true,\n  items: [{\n    id: Math.floor(Math.random() * 16777215).toString(16),\n    title: 'item2.1',\n    icon: 'file',\n    state: true,\n    items: []\n  }]\n}, {\n  id: Math.floor(Math.random() * 16777215).toString(16),\n  title: 'item3',\n  icon: 'folder',\n  state: true,\n  items: [{\n    id: Math.floor(Math.random() * 16777215).toString(16),\n    title: 'item3.1',\n    icon: 'file',\n    state: true,\n    items: []\n  }]\n}, {\n  id: Math.floor(Math.random() * 16777215).toString(16),\n  title: 'item4',\n  icon: 'folder',\n  state: true,\n  items: [{\n    id: Math.floor(Math.random() * 16777215).toString(16),\n    title: 'item4.1',\n    icon: 'file',\n    state: true,\n    items: []\n  }]\n}], action) => {\n  switch (action.type) {\n    case 'OPEN':\n      //    console.log(action)\n      console.log(getPathProps(action.id, state));\n  }\n\n  return state;\n};\n\nexport default tree;","map":{"version":3,"sources":["/home/illia/addnote/front/src/Reducers/tree.js"],"names":["R","require","findPath","primitive","object","path","key","value","Object","entries","newPath","getPathProps","prim","obj","arr","slice","length","console","log","compose","map","item","lensProp","fun","dino","name","type","friends","pets","friendsLens","lens0","lensIndex","petsLens","nameLens","frns0pets0name","view","set","over","s","tree","state","id","Math","floor","random","toString","title","icon","items","action"],"mappings":"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","sourcesContent":["\n\nconst R = require('ramda')\n\n\n\nfunction findPath(primitive, object, path = []) {\n    for (const [key, value] of Object.entries(object)) {\n      if (value === primitive) {\n        return [...path, key];\n      }\n      \n      if (typeof value === 'object' || typeof value === 'function') {\n        const newPath = findPath(primitive, value, [...path, key]);\n        if (newPath) {\n          return newPath;\n        }\n      }\n    }\n    return null;\n  }\n\nfunction getPathProps(prim, obj){\n    const arr = findPath(prim,obj).slice(0, findPath(prim,obj).length-1)\n    console.log(arr)\n    return R.compose(...arr.map(item => R.lensProp(item)))\n} \n\n\nconst fun = () => {\n    \n\n    const dino = {\n        name: 'Denver',\n        type: 'dinosaur',\n        friends: [\n          {\n            name: 'Wally',\n            type: 'human',\n            pets: [\n              {\n                name: 'Rocky',\n                type: 'dog'\n              }\n            ]\n          },\n          {\n            name: 'Casey',\n            type: 'human'\n          }\n        ]\n      }\n    // dino is in scope\n\n    // making some lenses\n    const friendsLens = R.lensProp('friends')\n    const lens0 = R.lensIndex(0)\n    const petsLens = R.lensProp('pets')\n    const nameLens = R.lensProp('name')\n\n    // stacking lenses together into a single lens\n    const frns0pets0name = R.compose(\n    friendsLens,  // outermost lens first\n    lens0,\n    petsLens,\n    lens0,\n    nameLens      // innermost lens last\n    )\n\n    // viewing data using a lens\n    console.log(R.view(frns0pets0name, dino))\n\n    // immutably setting data using a lens\n    console.log(R.set(frns0pets0name, 'Spot', dino))\n\n    // immutably mapping data using a lens\n    console.log(R.over(frns0pets0name, (s => s + '!'), dino))\n\n    console.log(dino) // unchanged\n\n\n}\n\n\nconst tree = (state =  [\n    {\n        id: Math.floor(Math.random()*16777215).toString(16),\n        title: 'item1', \n        icon: 'folder',\n        state: true,\n        items: [\n            {\n                id: Math.floor(Math.random()*16777215).toString(16),\n                title: 'item1.1',\n                icon: 'file',\n                state: true,\n                items: [\n                    {\n                        id: Math.floor(Math.random()*16777215).toString(16),\n                        title: 'item1.1.1',\n                        icon: 'file',\n                        state: true,\n                        items: []\n                    },\n                    {\n                        id: Math.floor(Math.random()*16777215).toString(16),\n                        title: 'item1.1.2',\n                        icon: 'file',\n                        state: true,\n                        items: []\n                    },\n                    {\n                        id: Math.floor(Math.random()*16777215).toString(16),\n                        title: 'item1.1.3',\n                        icon: 'file',\n                        state: true,\n                        items: []\n                    }\n                ]\n            },\n            {\n              id: Math.floor(Math.random()*16777215).toString(16),\n              title: 'item1.2',\n              icon: 'file',\n              state: true,\n              items: [\n                  {\n                      id: Math.floor(Math.random()*16777215).toString(16),\n                      title: 'item1.2.1',\n                      icon: 'file',\n                      state: true,\n                      items: []\n                  },\n                  {\n                      id: Math.floor(Math.random()*16777215).toString(16),\n                      title: 'item1.2.2',\n                      icon: 'file',\n                      state: true,\n                      items: []\n                  }\n              ]\n          }\n        ]\n    },\n    {\n        id: Math.floor(Math.random()*16777215).toString(16),\n        title: 'item2', \n        icon: 'folder',\n        state: true,\n        items: [\n            {\n                id: Math.floor(Math.random()*16777215).toString(16),\n                title: 'item2.1',\n                icon: 'file',\n                state: true,\n                items: []\n            }\n        ]\n    },\n    {\n        id: Math.floor(Math.random()*16777215).toString(16),\n        title: 'item3', \n        icon: 'folder',\n        state: true,\n        items: [\n            {\n                id: Math.floor(Math.random()*16777215).toString(16),\n                title: 'item3.1',\n                icon: 'file',\n                state: true,\n                items: []\n            }\n        ]\n    },\n    {\n        id: Math.floor(Math.random()*16777215).toString(16),\n        title: 'item4', \n        icon: 'folder',\n        state: true,\n        items: [\n            {\n                id: Math.floor(Math.random()*16777215).toString(16),\n                title: 'item4.1',\n                icon: 'file',\n                state: true,\n                items: []\n            }\n        ]\n    }\n], action) => {\n    switch(action.type){\n\n\n        case 'OPEN':\n        //    console.log(action)\n            \n        console.log(getPathProps(action.id,state))\n\n            \n    }\n    return state;   \n}\n\nexport default tree;"]},"metadata":{},"sourceType":"module"}