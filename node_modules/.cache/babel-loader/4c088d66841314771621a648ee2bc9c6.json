{"ast":null,"code":"const findNodeById = (tree, id) => {\n  tree.map(item => {\n    // console.log(item.title);\n    if (item.id === id) {\n      console.log(item);\n      return item;\n    }\n\n    if (item.items !== []) {\n      findNodeById(item.items, id);\n    }\n  });\n};\n\nconst tree = (state = [{\n  id: Math.floor(Math.random() * 16777215).toString(16),\n  title: 'item1',\n  icon: 'folder',\n  state: true,\n  items: [{\n    id: Math.floor(Math.random() * 16777215).toString(16),\n    title: 'item1.1',\n    icon: 'file',\n    state: true,\n    items: [{\n      id: Math.floor(Math.random() * 16777215).toString(16),\n      title: 'item1.1.1',\n      icon: 'file',\n      state: true,\n      items: []\n    }, {\n      id: Math.floor(Math.random() * 16777215).toString(16),\n      title: 'item1.1.2',\n      icon: 'file',\n      state: true,\n      items: []\n    }, {\n      id: Math.floor(Math.random() * 16777215).toString(16),\n      title: 'item1.1.3',\n      icon: 'file',\n      state: true,\n      items: []\n    }]\n  }, {\n    id: Math.floor(Math.random() * 16777215).toString(16),\n    title: 'item1.2',\n    icon: 'file',\n    state: true,\n    items: [{\n      id: Math.floor(Math.random() * 16777215).toString(16),\n      title: 'item1.2.1',\n      icon: 'file',\n      state: true,\n      items: []\n    }, {\n      id: Math.floor(Math.random() * 16777215).toString(16),\n      title: 'item1.2.2',\n      icon: 'file',\n      state: true,\n      items: []\n    }]\n  }]\n}, {\n  id: Math.floor(Math.random() * 16777215).toString(16),\n  title: 'item2',\n  icon: 'folder',\n  state: true,\n  items: [{\n    id: Math.floor(Math.random() * 16777215).toString(16),\n    title: 'item2.1',\n    icon: 'file',\n    state: true,\n    items: []\n  }]\n}, {\n  id: Math.floor(Math.random() * 16777215).toString(16),\n  title: 'item3',\n  icon: 'folder',\n  state: true,\n  items: [{\n    id: Math.floor(Math.random() * 16777215).toString(16),\n    title: 'item3.1',\n    icon: 'file',\n    state: true,\n    items: []\n  }]\n}, {\n  id: Math.floor(Math.random() * 16777215).toString(16),\n  title: 'item4',\n  icon: 'folder',\n  state: true,\n  items: [{\n    id: Math.floor(Math.random() * 16777215).toString(16),\n    title: 'item4.1',\n    icon: 'file',\n    state: true,\n    items: []\n  }]\n}], action) => {\n  switch (action.type) {\n    case 'OPEN':\n      //    console.log(action)\n      return [...state, findNodeById(state, action.id).state = !state.findNodeById(state, action.id).state];\n  }\n\n  return state;\n};\n\nexport default tree;","map":{"version":3,"sources":["/home/illia/addnote/front/src/Reducers/tree.js"],"names":["findNodeById","tree","id","map","item","console","log","items","state","Math","floor","random","toString","title","icon","action","type"],"mappings":"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","sourcesContent":["\n\n\nconst findNodeById = (tree, id) => {\n    tree.map(item => {\n        // console.log(item.title);\n\n        if(item.id === id){\n            console.log(item)\n            return item;\n        }\n\n        if(item.items !== []){\n            findNodeById(item.items, id)\n        }\n    })\n}   \n\n\nconst tree = (state =  [\n    {\n        id: Math.floor(Math.random()*16777215).toString(16),\n        title: 'item1', \n        icon: 'folder',\n        state: true,\n        items: [\n            {\n                id: Math.floor(Math.random()*16777215).toString(16),\n                title: 'item1.1',\n                icon: 'file',\n                state: true,\n                items: [\n                    {\n                        id: Math.floor(Math.random()*16777215).toString(16),\n                        title: 'item1.1.1',\n                        icon: 'file',\n                        state: true,\n                        items: []\n                    },\n                    {\n                        id: Math.floor(Math.random()*16777215).toString(16),\n                        title: 'item1.1.2',\n                        icon: 'file',\n                        state: true,\n                        items: []\n                    },\n                    {\n                        id: Math.floor(Math.random()*16777215).toString(16),\n                        title: 'item1.1.3',\n                        icon: 'file',\n                        state: true,\n                        items: []\n                    }\n                ]\n            },\n            {\n              id: Math.floor(Math.random()*16777215).toString(16),\n              title: 'item1.2',\n              icon: 'file',\n              state: true,\n              items: [\n                  {\n                      id: Math.floor(Math.random()*16777215).toString(16),\n                      title: 'item1.2.1',\n                      icon: 'file',\n                      state: true,\n                      items: []\n                  },\n                  {\n                      id: Math.floor(Math.random()*16777215).toString(16),\n                      title: 'item1.2.2',\n                      icon: 'file',\n                      state: true,\n                      items: []\n                  }\n              ]\n          }\n        ]\n    },\n    {\n        id: Math.floor(Math.random()*16777215).toString(16),\n        title: 'item2', \n        icon: 'folder',\n        state: true,\n        items: [\n            {\n                id: Math.floor(Math.random()*16777215).toString(16),\n                title: 'item2.1',\n                icon: 'file',\n                state: true,\n                items: []\n            }\n        ]\n    },\n    {\n        id: Math.floor(Math.random()*16777215).toString(16),\n        title: 'item3', \n        icon: 'folder',\n        state: true,\n        items: [\n            {\n                id: Math.floor(Math.random()*16777215).toString(16),\n                title: 'item3.1',\n                icon: 'file',\n                state: true,\n                items: []\n            }\n        ]\n    },\n    {\n        id: Math.floor(Math.random()*16777215).toString(16),\n        title: 'item4', \n        icon: 'folder',\n        state: true,\n        items: [\n            {\n                id: Math.floor(Math.random()*16777215).toString(16),\n                title: 'item4.1',\n                icon: 'file',\n                state: true,\n                items: []\n            }\n        ]\n    }\n], action) => {\n    switch(action.type){\n\n\n        case 'OPEN':\n        //    console.log(action)\n           return [...state ,findNodeById(state, action.id).state = !state.findNodeById(state, action.id).state]\n\n            \n    }\n    return state;   \n}\n\nexport default tree;"]},"metadata":{},"sourceType":"module"}