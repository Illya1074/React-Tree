{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/illia/addnote/front/src/Containers/Tree/Tree.js\";\nimport React from 'react'; // import {useState} from 'react'\n// const render = (tree, state=[], space=' ') => {\n//     let arr = state;\n//     tree.map((item) => {\n//         // arr = [...arr, item.title] \n//         console.log(space+item.title);\n//         if(item.items !== []){\n//             render(item.items, arr, space + ' ');\n//         }          \n//     } )\n// }\n\nconst Tree = ({\n  items\n}) => {\n  // const [state, setState] = useState([]);     \n  // const render = (tree, state=[], space=0) => {\n  //     // console.log(tree[0].title);\n  //     let arr = state;\n  //     // console.log(space)\n  //     for (let i = 0, length = tree.length; i < length; i++) {\n  //         // console.log(tree[i].title, space);\n  //         arr.push({\n  //             title: tree[i].title,\n  //             space: space\n  //         })\n  //         if(tree[i].items !== []){\n  //             render(tree[i].items, arr, space+1);\n  //         }\n  //         // space--;    \n  //     }\n  //   return state;  \n  // }\n  // console.log(render(tree))\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: items.map((i, j) => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [i.title, i.items ? /*#__PURE__*/_jsxDEV(Tree, {\n        items: i.items\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 33\n      }, this) : null]\n    }, j, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 31\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Tree;\nexport default Tree;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"sources":["/home/illia/addnote/front/src/Containers/Tree/Tree.js"],"names":["React","Tree","items","map","i","j","title"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAGA,MAAMC,IAAI,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAa;AACtB;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAIF,sBACE;AAAA,cACKA,KAAK,CAACC,GAAN,CAAU,CAACC,CAAD,EAAIC,CAAJ,kBAAW;AAAA,iBACjBD,CAAC,CAACE,KADe,EACRF,CAAC,CAACF,KAAF,gBAAU,QAAC,IAAD;AAAM,QAAA,KAAK,EAAEE,CAAC,CAACF;AAAf;AAAA;AAAA;AAAA;AAAA,cAAV,GAAoC,IAD5B;AAAA,OAASG,CAAT;AAAA;AAAA;AAAA;AAAA,YAArB;AADL;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CArCD;;KAAMJ,I;AAuCN,eAAeA,IAAf","sourcesContent":["import React from 'react';\n// import {useState} from 'react'\n\n  \n\n// const render = (tree, state=[], space=' ') => {\n//     let arr = state;\n//     tree.map((item) => {\n//         // arr = [...arr, item.title] \n//         console.log(space+item.title);\n        \n//         if(item.items !== []){\n//             render(item.items, arr, space + ' ');\n//         }          \n//     } )\n// }\n\n\nconst Tree = ({items}) => {\n    // const [state, setState] = useState([]);     \n\n    // const render = (tree, state=[], space=0) => {\n      \n    //     // console.log(tree[0].title);\n    //     let arr = state;\n    //     // console.log(space)\n    //     for (let i = 0, length = tree.length; i < length; i++) {\n    //         // console.log(tree[i].title, space);\n    //         arr.push({\n    //             title: tree[i].title,\n    //             space: space\n    //         })\n    //         if(tree[i].items !== []){\n    //             render(tree[i].items, arr, space+1);\n    //         }\n    //         // space--;    \n    //     }\n        \n    //   return state;  \n      \n    // }\n\n    // console.log(render(tree))\n    \n    \n\n  return (\n    <ul>\n        {items.map((i, j) => (<li key={j}>\n            {i.title}{i.items ? <Tree items={i.items}/> : null}\n        </li>)\n        )}\n        {/* {render(tree).map((item,i) => <h1 style = {{paddingLeft:item.space*30+'px'}} key={i}>{item.title}</h1>)} */}\n    </ul>\n  )\n}\n\nexport default Tree\n"]},"metadata":{},"sourceType":"module"}