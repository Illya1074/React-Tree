{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/illia/addnote/front/src/Containers/Tree/Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './Tree.css';\nimport ContentEditable from 'react-contenteditable';\n\nconst TreeItem = ({\n  item,\n  openNode,\n  addNode,\n  deleteNodeFun,\n  editTitle\n}) => {\n  _s();\n\n  const [typing, setTyping] = useState({\n    state: false,\n    timeCode: null,\n    val: item.title\n  });\n  useEffect(() => {\n    return () => {\n      clearTimeout(typing.timeCode);\n    };\n  });\n\n  function handleChange(evt) {\n    if (typing.state === true) {\n      clearTimeout(typing.timeCode);\n    }\n\n    const timer = setTimeout(() => {\n      setTyping({\n        state: false,\n        timeCode: null,\n        val: evt.target.value\n      });\n      editTitle(item.id, evt.target.value);\n    }, 1500);\n    setTyping({\n      state: true,\n      timeCode: timer,\n      val: evt.target.value\n    });\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tree_node\",\n    style: {\n      paddingLeft: '20px',\n      cursor: 'pointer'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tree_node_item\",\n      children: [/*#__PURE__*/_jsxDEV(ContentEditable, {\n        className: \"tree_node_item_add-button\",\n        html: typing.state ? typing.val : item.title,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"tree_node_item_add-button\",\n        onClick: () => openNode(item.id),\n        children: \"^\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"tree_node_item_add-button\",\n        onClick: () => addNode(item.id),\n        children: \"add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"tree_node_item_add-button\",\n        onClick: () => deleteNodeFun(item.id),\n        children: \"del\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), item.items && item.state === true ? /*#__PURE__*/_jsxDEV(Tree, {\n      items: item.items,\n      editTitle: editTitle,\n      openNode: openNode,\n      addNode: addNode,\n      deleteNodeFun: deleteNodeFun\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 50\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TreeItem, \"g+SRoNOzoOplBXszJQb48eId4xo=\");\n\n_c = TreeItem;\n\nconst Tree = ({\n  items,\n  openNode,\n  addNode,\n  deleteNodeFun,\n  editTitle\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: items.map((i, key) => /*#__PURE__*/_jsxDEV(TreeItem, {\n    item: i,\n    openNode: openNode,\n    addNode: addNode,\n    editTitle: editTitle,\n    deleteNodeFun: deleteNodeFun\n  }, key, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 28\n  }, this))\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 61,\n  columnNumber: 72\n}, this);\n\n_c2 = Tree;\nexport default Tree;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TreeItem\");\n$RefreshReg$(_c2, \"Tree\");","map":{"version":3,"sources":["/home/illia/addnote/front/src/Containers/Tree/Tree.js"],"names":["React","useEffect","useState","ContentEditable","TreeItem","item","openNode","addNode","deleteNodeFun","editTitle","typing","setTyping","state","timeCode","val","title","clearTimeout","handleChange","evt","timer","setTimeout","target","value","id","paddingLeft","cursor","items","Tree","map","i","key"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport './Tree.css';\nimport ContentEditable from 'react-contenteditable'\n\n\nconst TreeItem = ({item, openNode, addNode, deleteNodeFun, editTitle}) => {\n    \n    const [typing, setTyping] = useState({\n        state: false,\n        timeCode: null,\n        val: item.title\n    })\n\n    useEffect(() => {\n        return () => {\n            \n            clearTimeout(typing.timeCode)\n        }\n    })\n    \n    function handleChange(evt) {\n        \n        if(typing.state === true){\n            clearTimeout(typing.timeCode)\n        }\n        \n        const timer = setTimeout(() => {\n            setTyping({\n                state: false,\n                timeCode: null,\n                val: evt.target.value\n            })\n            editTitle(item.id, evt.target.value)\n        }, 1500);\n\n        setTyping({\n            state: true,\n            timeCode: timer,\n            val: evt.target.value\n        })\n\n    };\n\n    return (\n        <div className=\"tree_node\" style={{paddingLeft: '20px', cursor: 'pointer'}}>\n            <div className=\"tree_node_item\">\n                <ContentEditable className='tree_node_item_add-button' html={typing.state ? typing.val : item.title}  onChange={handleChange} />\n                <h5 className='tree_node_item_add-button' onClick={() => openNode(item.id)}>^</h5>\n                <h5 className='tree_node_item_add-button' onClick={() => addNode(item.id)}>add</h5>\n                <h5 className='tree_node_item_add-button' onClick={() => deleteNodeFun(item.id)}>del</h5>\n            </div>\n            {item.items && item.state === true ? <Tree items={item.items} editTitle={editTitle} openNode={openNode} addNode={addNode} deleteNodeFun={deleteNodeFun}/> : null}\n        </div>\n    )\n} \n        \n   \n\n\n\nconst Tree = ({items, openNode, addNode, deleteNodeFun, editTitle}) => <div>\n    {items.map((i, key) => <TreeItem  key={key} item={i} openNode={openNode} addNode={addNode} editTitle={editTitle} deleteNodeFun={deleteNodeFun}/>)}    \n</div>\n\n\nexport default Tree;"]},"metadata":{},"sourceType":"module"}